
CLASS_KEYBOARD2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  000013b2  00001446  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  00800134  00800134  0000147a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000147a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  000014ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000580d  00000000  00000000  0000175c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001cce  00000000  00000000  00006f69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000884e  00000000  00000000  00008c37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a14  00000000  00000000  00011488  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00016e98  00000000  00000000  00011e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003fa4  00000000  00000000  00028d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c00  00000000  00000000  0002ccd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00007346  00000000  00000000  0002d8d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a8 c0       	rjmp	.+336    	; 0x152 <__ctors_end>
       2:	00 00       	nop
       4:	c4 c0       	rjmp	.+392    	; 0x18e <__bad_interrupt>
       6:	00 00       	nop
       8:	c2 c0       	rjmp	.+388    	; 0x18e <__bad_interrupt>
       a:	00 00       	nop
       c:	c0 c0       	rjmp	.+384    	; 0x18e <__bad_interrupt>
       e:	00 00       	nop
      10:	be c0       	rjmp	.+380    	; 0x18e <__bad_interrupt>
      12:	00 00       	nop
      14:	bc c0       	rjmp	.+376    	; 0x18e <__bad_interrupt>
      16:	00 00       	nop
      18:	ba c0       	rjmp	.+372    	; 0x18e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b8 c0       	rjmp	.+368    	; 0x18e <__bad_interrupt>
      1e:	00 00       	nop
      20:	b6 c0       	rjmp	.+364    	; 0x18e <__bad_interrupt>
      22:	00 00       	nop
      24:	b4 c0       	rjmp	.+360    	; 0x18e <__bad_interrupt>
      26:	00 00       	nop
      28:	4c c7       	rjmp	.+3736   	; 0xec2 <__vector_10>
      2a:	00 00       	nop
      2c:	b0 c0       	rjmp	.+352    	; 0x18e <__bad_interrupt>
      2e:	00 00       	nop
      30:	ae c0       	rjmp	.+348    	; 0x18e <__bad_interrupt>
      32:	00 00       	nop
      34:	ac c0       	rjmp	.+344    	; 0x18e <__bad_interrupt>
      36:	00 00       	nop
      38:	aa c0       	rjmp	.+340    	; 0x18e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a8 c0       	rjmp	.+336    	; 0x18e <__bad_interrupt>
      3e:	00 00       	nop
      40:	a6 c0       	rjmp	.+332    	; 0x18e <__bad_interrupt>
      42:	00 00       	nop
      44:	a4 c0       	rjmp	.+328    	; 0x18e <__bad_interrupt>
      46:	00 00       	nop
      48:	a2 c0       	rjmp	.+324    	; 0x18e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a0 c0       	rjmp	.+320    	; 0x18e <__bad_interrupt>
      4e:	00 00       	nop
      50:	9e c0       	rjmp	.+316    	; 0x18e <__bad_interrupt>
      52:	00 00       	nop
      54:	9c c0       	rjmp	.+312    	; 0x18e <__bad_interrupt>
      56:	00 00       	nop
      58:	9a c0       	rjmp	.+308    	; 0x18e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	98 c0       	rjmp	.+304    	; 0x18e <__bad_interrupt>
      5e:	00 00       	nop
      60:	96 c0       	rjmp	.+300    	; 0x18e <__bad_interrupt>
      62:	00 00       	nop
      64:	94 c0       	rjmp	.+296    	; 0x18e <__bad_interrupt>
      66:	00 00       	nop
      68:	92 c0       	rjmp	.+292    	; 0x18e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	90 c0       	rjmp	.+288    	; 0x18e <__bad_interrupt>
      6e:	00 00       	nop
      70:	8e c0       	rjmp	.+284    	; 0x18e <__bad_interrupt>
      72:	00 00       	nop
      74:	8c c0       	rjmp	.+280    	; 0x18e <__bad_interrupt>
      76:	00 00       	nop
      78:	8a c0       	rjmp	.+276    	; 0x18e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	88 c0       	rjmp	.+272    	; 0x18e <__bad_interrupt>
      7e:	00 00       	nop
      80:	86 c0       	rjmp	.+268    	; 0x18e <__bad_interrupt>
      82:	00 00       	nop
      84:	84 c0       	rjmp	.+264    	; 0x18e <__bad_interrupt>
      86:	00 00       	nop
      88:	82 c0       	rjmp	.+260    	; 0x18e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	80 c0       	rjmp	.+256    	; 0x18e <__bad_interrupt>
      8e:	00 00       	nop
      90:	7e c0       	rjmp	.+252    	; 0x18e <__bad_interrupt>
      92:	00 00       	nop
      94:	7c c0       	rjmp	.+248    	; 0x18e <__bad_interrupt>
	...

00000098 <ProductString>:
      98:	26 03 4c 00 55 00 46 00 41 00 20 00 4b 00 65 00     &.L.U.F.A. .K.e.
      a8:	79 00 62 00 6f 00 61 00 72 00 64 00 20 00 44 00     y.b.o.a.r.d. .D.
      b8:	65 00 6d 00 6f 00 00 00                             e.m.o...

000000c0 <ManufacturerString>:
      c0:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      d0:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000da <LanguageString>:
      da:	04 03 09 04                                         ....

000000de <ConfigurationDescriptor>:
      de:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
      ee:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
      fe:	00 05                                               ..

00000100 <DeviceDescriptor>:
     100:	12 01 10 01 00 00 00 08 eb 03 42 20 01 00 01 02     ..........B ....
     110:	00 01                                               ..

00000112 <KeyboardReport>:
     112:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     122:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
     132:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
     142:	26 ff 00 05 07 19 00 29 ff 95 06 75 08 81 00 c0     &......)...u....

00000152 <__ctors_end>:
     152:	11 24       	eor	r1, r1
     154:	1f be       	out	0x3f, r1	; 63
     156:	cf ef       	ldi	r28, 0xFF	; 255
     158:	d0 e2       	ldi	r29, 0x20	; 32
     15a:	de bf       	out	0x3e, r29	; 62
     15c:	cd bf       	out	0x3d, r28	; 61

0000015e <__do_copy_data>:
     15e:	11 e0       	ldi	r17, 0x01	; 1
     160:	a0 e0       	ldi	r26, 0x00	; 0
     162:	b1 e0       	ldi	r27, 0x01	; 1
     164:	e2 eb       	ldi	r30, 0xB2	; 178
     166:	f3 e1       	ldi	r31, 0x13	; 19
     168:	00 e0       	ldi	r16, 0x00	; 0
     16a:	0b bf       	out	0x3b, r16	; 59
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x14>
     16e:	07 90       	elpm	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	a4 33       	cpi	r26, 0x34	; 52
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0x10>

00000178 <__do_clear_bss>:
     178:	21 e0       	ldi	r18, 0x01	; 1
     17a:	a4 e3       	ldi	r26, 0x34	; 52
     17c:	b1 e0       	ldi	r27, 0x01	; 1
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	ae 35       	cpi	r26, 0x5E	; 94
     184:	b2 07       	cpc	r27, r18
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	6b d0       	rcall	.+214    	; 0x260 <main>
     18a:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <_exit>

0000018e <__bad_interrupt>:
     18e:	38 cf       	rjmp	.-400    	; 0x0 <__vectors>

00000190 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     190:	29 2f       	mov	r18, r25
     192:	33 27       	eor	r19, r19
     194:	23 30       	cpi	r18, 0x03	; 3
     196:	31 05       	cpc	r19, r1
     198:	c9 f0       	breq	.+50     	; 0x1cc <CALLBACK_USB_GetDescriptor+0x3c>
     19a:	38 f4       	brcc	.+14     	; 0x1aa <CALLBACK_USB_GetDescriptor+0x1a>
     19c:	21 30       	cpi	r18, 0x01	; 1
     19e:	31 05       	cpc	r19, r1
     1a0:	59 f0       	breq	.+22     	; 0x1b8 <CALLBACK_USB_GetDescriptor+0x28>
     1a2:	22 30       	cpi	r18, 0x02	; 2
     1a4:	31 05       	cpc	r19, r1
     1a6:	69 f0       	breq	.+26     	; 0x1c2 <CALLBACK_USB_GetDescriptor+0x32>
     1a8:	35 c0       	rjmp	.+106    	; 0x214 <CALLBACK_USB_GetDescriptor+0x84>
     1aa:	21 32       	cpi	r18, 0x21	; 33
     1ac:	31 05       	cpc	r19, r1
     1ae:	41 f1       	breq	.+80     	; 0x200 <CALLBACK_USB_GetDescriptor+0x70>
     1b0:	22 32       	cpi	r18, 0x22	; 34
     1b2:	31 05       	cpc	r19, r1
     1b4:	51 f1       	breq	.+84     	; 0x20a <CALLBACK_USB_GetDescriptor+0x7a>
     1b6:	2e c0       	rjmp	.+92     	; 0x214 <CALLBACK_USB_GetDescriptor+0x84>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     1b8:	82 e1       	ldi	r24, 0x12	; 18
     1ba:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     1bc:	20 e0       	ldi	r18, 0x00	; 0
     1be:	31 e0       	ldi	r19, 0x01	; 1
     1c0:	32 c0       	rjmp	.+100    	; 0x226 <CALLBACK_USB_GetDescriptor+0x96>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     1c2:	82 e2       	ldi	r24, 0x22	; 34
     1c4:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     1c6:	2e ed       	ldi	r18, 0xDE	; 222
     1c8:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     1ca:	2d c0       	rjmp	.+90     	; 0x226 <CALLBACK_USB_GetDescriptor+0x96>
		case DTYPE_String:
			switch (DescriptorNumber)
     1cc:	99 27       	eor	r25, r25
     1ce:	81 30       	cpi	r24, 0x01	; 1
     1d0:	91 05       	cpc	r25, r1
     1d2:	51 f0       	breq	.+20     	; 0x1e8 <CALLBACK_USB_GetDescriptor+0x58>
     1d4:	18 f0       	brcs	.+6      	; 0x1dc <CALLBACK_USB_GetDescriptor+0x4c>
     1d6:	02 97       	sbiw	r24, 0x02	; 2
     1d8:	69 f0       	breq	.+26     	; 0x1f4 <CALLBACK_USB_GetDescriptor+0x64>
     1da:	21 c0       	rjmp	.+66     	; 0x21e <CALLBACK_USB_GetDescriptor+0x8e>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     1dc:	ea ed       	ldi	r30, 0xDA	; 218
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	84 91       	lpm	r24, Z
     1e2:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     1e4:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     1e6:	1f c0       	rjmp	.+62     	; 0x226 <CALLBACK_USB_GetDescriptor+0x96>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     1e8:	e0 ec       	ldi	r30, 0xC0	; 192
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	84 91       	lpm	r24, Z
     1ee:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     1f0:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     1f2:	19 c0       	rjmp	.+50     	; 0x226 <CALLBACK_USB_GetDescriptor+0x96>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     1f4:	e8 e9       	ldi	r30, 0x98	; 152
     1f6:	f0 e0       	ldi	r31, 0x00	; 0
     1f8:	84 91       	lpm	r24, Z
     1fa:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     1fc:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     1fe:	13 c0       	rjmp	.+38     	; 0x226 <CALLBACK_USB_GetDescriptor+0x96>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     200:	89 e0       	ldi	r24, 0x09	; 9
     202:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
     204:	20 ef       	ldi	r18, 0xF0	; 240
     206:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     208:	0e c0       	rjmp	.+28     	; 0x226 <CALLBACK_USB_GetDescriptor+0x96>
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
     20a:	80 e4       	ldi	r24, 0x40	; 64
     20c:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
     20e:	22 e1       	ldi	r18, 0x12	; 18
     210:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(KeyboardReport);
			break;
     212:	09 c0       	rjmp	.+18     	; 0x226 <CALLBACK_USB_GetDescriptor+0x96>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     218:	20 e0       	ldi	r18, 0x00	; 0
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	04 c0       	rjmp	.+8      	; 0x226 <CALLBACK_USB_GetDescriptor+0x96>
	uint16_t    Size    = NO_DESCRIPTOR;
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     222:	20 e0       	ldi	r18, 0x00	; 0
     224:	30 e0       	ldi	r19, 0x00	; 0
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
			break;
	}

	*DescriptorAddress = Address;
     226:	fa 01       	movw	r30, r20
     228:	31 83       	std	Z+1, r19	; 0x01
     22a:	20 83       	st	Z, r18
	return Size;
}
     22c:	08 95       	ret

0000022e <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware()
{

	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     22e:	84 b7       	in	r24, 0x34	; 52
     230:	87 7f       	andi	r24, 0xF7	; 247
     232:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	f8 94       	cli
     238:	a8 95       	wdr
     23a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     23e:	88 61       	ori	r24, 0x18	; 24
     240:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     244:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     248:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	80 e8       	ldi	r24, 0x80	; 128
     24e:	0f b6       	in	r0, 0x3f	; 63
     250:	f8 94       	cli
     252:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     256:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     25a:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	matrix_init();
     25c:	42 c0       	rjmp	.+132    	; 0x2e2 <matrix_init>
     25e:	08 95       	ret

00000260 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     260:	e6 df       	rcall	.-52     	; 0x22e <SetupHardware>
	//LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	GlobalInterruptEnable();

	for (;;)
	{
		matrix_scan();
     262:	78 94       	sei
     264:	48 d0       	rcall	.+144    	; 0x2f6 <matrix_scan>
		HID_Device_USBTask(&Keyboard_HID_Interface);
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	8f d2       	rcall	.+1310   	; 0x78a <HID_Device_USBTask>
		USB_USBTask();
     26c:	0e 94 a0 09 	call	0x1340	; 0x1340 <USB_USBTask>
     270:	f9 cf       	rjmp	.-14     	; 0x264 <main+0x4>

00000272 <EVENT_USB_Device_Connect>:
	//USB_Init();
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
     272:	08 95       	ret

00000274 <EVENT_USB_Device_Disconnect>:
	//LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
     274:	08 95       	ret

00000276 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	91 e0       	ldi	r25, 0x01	; 1
     27a:	73 d2       	rcall	.+1254   	; 0x762 <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     27c:	e2 ee       	ldi	r30, 0xE2	; 226
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	80 81       	ld	r24, Z
     282:	84 60       	ori	r24, 0x04	; 4
     284:	80 83       	st	Z, r24
     286:	08 95       	ret

00000288 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	21 c1       	rjmp	.+578    	; 0x4d0 <HID_Device_ProcessControlRequest>
     28e:	08 95       	ret

00000290 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     290:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
     294:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
     298:	00 97       	sbiw	r24, 0x00	; 0
     29a:	29 f0       	breq	.+10     	; 0x2a6 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
     2a2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
     2a6:	08 95       	ret

000002a8 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	ec e3       	ldi	r30, 0x3C	; 60
     2ae:	f1 e0       	ldi	r31, 0x01	; 1
     2b0:	a2 2f       	mov	r26, r18
     2b2:	b3 2f       	mov	r27, r19
     2b4:	28 e4       	ldi	r18, 0x48	; 72
     2b6:	31 e0       	ldi	r19, 0x01	; 1

	//if (UsedKeyCodes)
	  //KeyboardReport->Modifier = HID_KEYBOARD_MODIFIER_LEFTSHIFT;
	  
	  for(int i = 0; i < 6; i++){
	  	if(keys_pressed[i] != 0){
     2b8:	81 91       	ld	r24, Z+
     2ba:	91 91       	ld	r25, Z+
     2bc:	00 97       	sbiw	r24, 0x00	; 0
     2be:	19 f0       	breq	.+6      	; 0x2c6 <CALLBACK_HID_Device_CreateHIDReport+0x1e>
	  		KeyboardReport->KeyCode[i] = keys_pressed[i];
     2c0:	12 96       	adiw	r26, 0x02	; 2
     2c2:	8c 93       	st	X, r24
     2c4:	12 97       	sbiw	r26, 0x02	; 2
     2c6:	11 96       	adiw	r26, 0x01	; 1
	  //KeyboardReport->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_F;

	//if (UsedKeyCodes)
	  //KeyboardReport->Modifier = HID_KEYBOARD_MODIFIER_LEFTSHIFT;
	  
	  for(int i = 0; i < 6; i++){
     2c8:	e2 17       	cp	r30, r18
     2ca:	f3 07       	cpc	r31, r19
     2cc:	a9 f7       	brne	.-22     	; 0x2b8 <CALLBACK_HID_Device_CreateHIDReport+0x10>
	  	if(keys_pressed[i] != 0){
	  		KeyboardReport->KeyCode[i] = keys_pressed[i];
	  	}
	  }

	*ReportSize = sizeof(USB_KeyboardReport_Data_t);
     2ce:	88 e0       	ldi	r24, 0x08	; 8
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	f8 01       	movw	r30, r16
     2d4:	91 83       	std	Z+1, r25	; 0x01
     2d6:	80 83       	st	Z, r24
	return false;
}
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	1f 91       	pop	r17
     2dc:	0f 91       	pop	r16
     2de:	08 95       	ret

000002e0 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     2e0:	08 95       	ret

000002e2 <matrix_init>:

//configure input and output pins
//columns output
//rows input
void matrix_init(){
	DDRB = 0b10000001;	//set pin B7 (row1) and caps to high (direction -> output)
     2e2:	81 e8       	ldi	r24, 0x81	; 129
     2e4:	84 b9       	out	0x04, r24	; 4
	DDRC = 0b11000000;	//set pin c6 (row2) and c7 (row3) to high (direction -> output)
     2e6:	80 ec       	ldi	r24, 0xC0	; 192
     2e8:	87 b9       	out	0x07, r24	; 7
	
	//this does the same as above
	DDRB = (1 << DDB0);
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	84 b9       	out	0x04, r24	; 4
	DDRC = (1 << DDC6);
     2ee:	80 e4       	ldi	r24, 0x40	; 64
     2f0:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1 << DDC7);
     2f2:	3f 9a       	sbi	0x07, 7	; 7
     2f4:	08 95       	ret

000002f6 <matrix_scan>:
	{
		//printf("Port: %d, Pin: %d", rows[i].port, rows[i].pin);
	}
}

void matrix_scan(){
     2f6:	2f 92       	push	r2
     2f8:	3f 92       	push	r3
     2fa:	4f 92       	push	r4
     2fc:	5f 92       	push	r5
     2fe:	6f 92       	push	r6
     300:	7f 92       	push	r7
     302:	8f 92       	push	r8
     304:	9f 92       	push	r9
     306:	af 92       	push	r10
     308:	bf 92       	push	r11
     30a:	cf 92       	push	r12
     30c:	df 92       	push	r13
     30e:	ef 92       	push	r14
     310:	ff 92       	push	r15
     312:	0f 93       	push	r16
     314:	1f 93       	push	r17
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	60 e1       	ldi	r22, 0x10	; 16
     31c:	71 e0       	ldi	r23, 0x01	; 1
     31e:	0f 2e       	mov	r0, r31
     320:	f8 e4       	ldi	r31, 0x48	; 72
     322:	4f 2e       	mov	r4, r31
     324:	f1 e0       	ldi	r31, 0x01	; 1
     326:	5f 2e       	mov	r5, r31
     328:	f0 2d       	mov	r31, r0
     32a:	0f 2e       	mov	r0, r31
     32c:	f2 e2       	ldi	r31, 0x22	; 34
     32e:	2f 2e       	mov	r2, r31
     330:	f1 e0       	ldi	r31, 0x01	; 1
     332:	3f 2e       	mov	r3, r31
     334:	f0 2d       	mov	r31, r0
	
	for (int i = 0; i < NUM_COLS; i++)
	{
		_delay_ms(10);
		
		*cols[i].port &= (1 << cols[i].pin);	//set port to high
     336:	01 e0       	ldi	r16, 0x01	; 1
     338:	10 e0       	ldi	r17, 0x00	; 0
     33a:	0f 2e       	mov	r0, r31
     33c:	f2 e2       	ldi	r31, 0x22	; 34
     33e:	af 2e       	mov	r10, r31
     340:	f1 e0       	ldi	r31, 0x01	; 1
     342:	bf 2e       	mov	r11, r31
     344:	f0 2d       	mov	r31, r0
			{
				//key down
				if(rows[j].pin & (1 << rows[j].pin)){
					//check if modifier
					
					key_states_layer[i][j] = 1;
     346:	66 24       	eor	r6, r6
     348:	63 94       	inc	r6
		{
			_delay_ms(10);
			cli();
			
			//if pin state is different to the current keystate
			if (((bool)rows[j].pin & (1 << rows[j].pin)) != key_states_layer[i][j])
     34a:	90 2e       	mov	r9, r16
     34c:	81 2e       	mov	r8, r17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     34e:	8f e3       	ldi	r24, 0x3F	; 63
     350:	9c e9       	ldi	r25, 0x9C	; 156
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	f1 f7       	brne	.-4      	; 0x352 <matrix_scan+0x5c>
     356:	00 c0       	rjmp	.+0      	; 0x358 <matrix_scan+0x62>
     358:	00 00       	nop
     35a:	6b 01       	movw	r12, r22
	
	for (int i = 0; i < NUM_COLS; i++)
	{
		_delay_ms(10);
		
		*cols[i].port &= (1 << cols[i].pin);	//set port to high
     35c:	db 01       	movw	r26, r22
     35e:	ed 91       	ld	r30, X+
     360:	fc 91       	ld	r31, X
     362:	11 97       	sbiw	r26, 0x01	; 1
     364:	20 81       	ld	r18, Z
     366:	c8 01       	movw	r24, r16
     368:	12 96       	adiw	r26, 0x02	; 2
     36a:	0c 90       	ld	r0, X
     36c:	02 c0       	rjmp	.+4      	; 0x372 <matrix_scan+0x7c>
     36e:	88 0f       	add	r24, r24
     370:	99 1f       	adc	r25, r25
     372:	0a 94       	dec	r0
     374:	e2 f7       	brpl	.-8      	; 0x36e <matrix_scan+0x78>
     376:	82 23       	and	r24, r18
     378:	80 83       	st	Z, r24
     37a:	e9 e1       	ldi	r30, 0x19	; 25
     37c:	f1 e0       	ldi	r31, 0x01	; 1
     37e:	d1 01       	movw	r26, r2
     380:	72 01       	movw	r14, r4
     382:	cf e3       	ldi	r28, 0x3F	; 63
     384:	dc e9       	ldi	r29, 0x9C	; 156
     386:	21 97       	sbiw	r28, 0x01	; 1
     388:	f1 f7       	brne	.-4      	; 0x386 <matrix_scan+0x90>
     38a:	00 c0       	rjmp	.+0      	; 0x38c <matrix_scan+0x96>
     38c:	00 00       	nop
		
		for (int j = 0; j < NUM_ROWS; j++)
		{
			_delay_ms(10);
			cli();
     38e:	f8 94       	cli
			
			//if pin state is different to the current keystate
			if (((bool)rows[j].pin & (1 << rows[j].pin)) != key_states_layer[i][j])
     390:	72 80       	ldd	r7, Z+2	; 0x02
     392:	27 2d       	mov	r18, r7
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	e7 01       	movw	r28, r14
     398:	89 2d       	mov	r24, r9
     39a:	98 2d       	mov	r25, r8
     39c:	71 10       	cpse	r7, r1
     39e:	02 c0       	rjmp	.+4      	; 0x3a4 <matrix_scan+0xae>
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	a8 01       	movw	r20, r16
     3a6:	07 2c       	mov	r0, r7
     3a8:	02 c0       	rjmp	.+4      	; 0x3ae <matrix_scan+0xb8>
     3aa:	44 0f       	add	r20, r20
     3ac:	55 1f       	adc	r21, r21
     3ae:	0a 94       	dec	r0
     3b0:	e2 f7       	brpl	.-8      	; 0x3aa <matrix_scan+0xb4>
     3b2:	84 23       	and	r24, r20
     3b4:	95 23       	and	r25, r21
     3b6:	48 81       	ld	r20, Y
     3b8:	50 e0       	ldi	r21, 0x00	; 0
     3ba:	84 17       	cp	r24, r20
     3bc:	95 07       	cpc	r25, r21
     3be:	09 f4       	brne	.+2      	; 0x3c2 <matrix_scan+0xcc>
     3c0:	4c c0       	rjmp	.+152    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
			{
				//key down
				if(rows[j].pin & (1 << rows[j].pin)){
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <matrix_scan+0xd2>
     3c4:	35 95       	asr	r19
     3c6:	27 95       	ror	r18
     3c8:	7a 94       	dec	r7
     3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <matrix_scan+0xce>
     3cc:	20 ff       	sbrs	r18, 0
     3ce:	22 c0       	rjmp	.+68     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
					//check if modifier
					
					key_states_layer[i][j] = 1;
     3d0:	68 82       	st	Y, r6
					for (int k = 0; k < 6; k++)
					{
						//if no keys pressed at this location
						if (keys_pressed[k] == 0)
     3d2:	cc e3       	ldi	r28, 0x3C	; 60
     3d4:	d1 e0       	ldi	r29, 0x01	; 1
     3d6:	88 81       	ld	r24, Y
     3d8:	99 81       	ldd	r25, Y+1	; 0x01
     3da:	89 2b       	or	r24, r25
     3dc:	49 f0       	breq	.+18     	; 0x3f0 <matrix_scan+0xfa>
     3de:	ce e3       	ldi	r28, 0x3E	; 62
     3e0:	d1 e0       	ldi	r29, 0x01	; 1
				//key down
				if(rows[j].pin & (1 << rows[j].pin)){
					//check if modifier
					
					key_states_layer[i][j] = 1;
					for (int k = 0; k < 6; k++)
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	90 e0       	ldi	r25, 0x00	; 0
					{
						//if no keys pressed at this location
						if (keys_pressed[k] == 0)
     3e6:	29 91       	ld	r18, Y+
     3e8:	39 91       	ld	r19, Y+
     3ea:	23 2b       	or	r18, r19
     3ec:	71 f4       	brne	.+28     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <matrix_scan+0xfe>
				//key down
				if(rows[j].pin & (1 << rows[j].pin)){
					//check if modifier
					
					key_states_layer[i][j] = 1;
					for (int k = 0; k < 6; k++)
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	90 e0       	ldi	r25, 0x00	; 0
					{
						//if no keys pressed at this location
						if (keys_pressed[k] == 0)
						{
							keys_pressed[k] = keyboard_layout[i][j];
     3f4:	88 0f       	add	r24, r24
     3f6:	99 1f       	adc	r25, r25
     3f8:	ec 01       	movw	r28, r24
     3fa:	c4 5c       	subi	r28, 0xC4	; 196
     3fc:	de 4f       	sbci	r29, 0xFE	; 254
     3fe:	8d 91       	ld	r24, X+
     400:	9c 91       	ld	r25, X
     402:	11 97       	sbiw	r26, 0x01	; 1
     404:	99 83       	std	Y+1, r25	; 0x01
     406:	88 83       	st	Y, r24
							break;
     408:	28 c0       	rjmp	.+80     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
				//key down
				if(rows[j].pin & (1 << rows[j].pin)){
					//check if modifier
					
					key_states_layer[i][j] = 1;
					for (int k = 0; k < 6; k++)
     40a:	01 96       	adiw	r24, 0x01	; 1
     40c:	86 30       	cpi	r24, 0x06	; 6
     40e:	91 05       	cpc	r25, r1
     410:	51 f7       	brne	.-44     	; 0x3e6 <matrix_scan+0xf0>
     412:	23 c0       	rjmp	.+70     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
							break;
						}
					}
				}else{
					//key up
					key_states_layer[i][j] = 0;
     414:	18 82       	st	Y, r1
					for (int k = 0; k < 6; k++)
					{
						//if no keys pressed at this location
						if (keys_pressed[k] == keyboard_layout[i][j])
     416:	4d 91       	ld	r20, X+
     418:	5c 91       	ld	r21, X
     41a:	11 97       	sbiw	r26, 0x01	; 1
     41c:	cc e3       	ldi	r28, 0x3C	; 60
     41e:	d1 e0       	ldi	r29, 0x01	; 1
     420:	88 81       	ld	r24, Y
     422:	99 81       	ldd	r25, Y+1	; 0x01
     424:	84 17       	cp	r24, r20
     426:	95 07       	cpc	r25, r21
     428:	51 f0       	breq	.+20     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     42a:	ce e3       	ldi	r28, 0x3E	; 62
     42c:	d1 e0       	ldi	r29, 0x01	; 1
						}
					}
				}else{
					//key up
					key_states_layer[i][j] = 0;
					for (int k = 0; k < 6; k++)
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	90 e0       	ldi	r25, 0x00	; 0
					{
						//if no keys pressed at this location
						if (keys_pressed[k] == keyboard_layout[i][j])
     432:	29 91       	ld	r18, Y+
     434:	39 91       	ld	r19, Y+
     436:	24 17       	cp	r18, r20
     438:	35 07       	cpc	r19, r21
     43a:	59 f4       	brne	.+22     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     43c:	02 c0       	rjmp	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
						}
					}
				}else{
					//key up
					key_states_layer[i][j] = 0;
					for (int k = 0; k < 6; k++)
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	90 e0       	ldi	r25, 0x00	; 0
					{
						//if no keys pressed at this location
						if (keys_pressed[k] == keyboard_layout[i][j])
						{
							keys_pressed[k] = 0;
     442:	88 0f       	add	r24, r24
     444:	99 1f       	adc	r25, r25
     446:	ec 01       	movw	r28, r24
     448:	c4 5c       	subi	r28, 0xC4	; 196
     44a:	de 4f       	sbci	r29, 0xFE	; 254
     44c:	19 82       	std	Y+1, r1	; 0x01
     44e:	18 82       	st	Y, r1
							break;
     450:	04 c0       	rjmp	.+8      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
						}
					}
				}else{
					//key up
					key_states_layer[i][j] = 0;
					for (int k = 0; k < 6; k++)
     452:	01 96       	adiw	r24, 0x01	; 1
     454:	86 30       	cpi	r24, 0x06	; 6
     456:	91 05       	cpc	r25, r1
     458:	61 f7       	brne	.-40     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     45a:	33 96       	adiw	r30, 0x03	; 3
     45c:	df ef       	ldi	r29, 0xFF	; 255
     45e:	ed 1a       	sub	r14, r29
     460:	fd 0a       	sbc	r15, r29
     462:	12 96       	adiw	r26, 0x02	; 2
	{
		_delay_ms(10);
		
		*cols[i].port &= (1 << cols[i].pin);	//set port to high
		
		for (int j = 0; j < NUM_ROWS; j++)
     464:	ea 15       	cp	r30, r10
     466:	fb 05       	cpc	r31, r11
     468:	09 f0       	breq	.+2      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     46a:	8b cf       	rjmp	.-234    	; 0x382 <matrix_scan+0x8c>
					}
				}
			}
			
		}
		sei();
     46c:	78 94       	sei
		*cols[i].port &= ~(1 << cols[i].pin); //set pin to low
     46e:	d6 01       	movw	r26, r12
     470:	ed 91       	ld	r30, X+
     472:	fc 91       	ld	r31, X
     474:	11 97       	sbiw	r26, 0x01	; 1
     476:	90 81       	ld	r25, Z
     478:	98 01       	movw	r18, r16
     47a:	12 96       	adiw	r26, 0x02	; 2
     47c:	0c 90       	ld	r0, X
     47e:	02 c0       	rjmp	.+4      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     480:	22 0f       	add	r18, r18
     482:	33 1f       	adc	r19, r19
     484:	0a 94       	dec	r0
     486:	e2 f7       	brpl	.-8      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     488:	82 2f       	mov	r24, r18
     48a:	80 95       	com	r24
     48c:	89 23       	and	r24, r25
     48e:	80 83       	st	Z, r24
     490:	6d 5f       	subi	r22, 0xFD	; 253
     492:	7f 4f       	sbci	r23, 0xFF	; 255
     494:	b3 e0       	ldi	r27, 0x03	; 3
     496:	4b 0e       	add	r4, r27
     498:	51 1c       	adc	r5, r1
     49a:	c6 e0       	ldi	r28, 0x06	; 6
     49c:	2c 0e       	add	r2, r28
     49e:	31 1c       	adc	r3, r1

void matrix_scan(){
	//TODO: Switch rows and cols
	bool key_state;
	
	for (int i = 0; i < NUM_COLS; i++)
     4a0:	d1 e0       	ldi	r29, 0x01	; 1
     4a2:	69 31       	cpi	r22, 0x19	; 25
     4a4:	7d 07       	cpc	r23, r29
     4a6:	09 f0       	breq	.+2      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
     4a8:	52 cf       	rjmp	.-348    	; 0x34e <matrix_scan+0x58>
		}
		sei();
		*cols[i].port &= ~(1 << cols[i].pin); //set pin to low
		
	}
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	1f 91       	pop	r17
     4b0:	0f 91       	pop	r16
     4b2:	ff 90       	pop	r15
     4b4:	ef 90       	pop	r14
     4b6:	df 90       	pop	r13
     4b8:	cf 90       	pop	r12
     4ba:	bf 90       	pop	r11
     4bc:	af 90       	pop	r10
     4be:	9f 90       	pop	r9
     4c0:	8f 90       	pop	r8
     4c2:	7f 90       	pop	r7
     4c4:	6f 90       	pop	r6
     4c6:	5f 90       	pop	r5
     4c8:	4f 90       	pop	r4
     4ca:	3f 90       	pop	r3
     4cc:	2f 90       	pop	r2
     4ce:	08 95       	ret

000004d0 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     4d0:	3f 92       	push	r3
     4d2:	4f 92       	push	r4
     4d4:	5f 92       	push	r5
     4d6:	6f 92       	push	r6
     4d8:	7f 92       	push	r7
     4da:	8f 92       	push	r8
     4dc:	9f 92       	push	r9
     4de:	af 92       	push	r10
     4e0:	bf 92       	push	r11
     4e2:	cf 92       	push	r12
     4e4:	df 92       	push	r13
     4e6:	ef 92       	push	r14
     4e8:	ff 92       	push	r15
     4ea:	0f 93       	push	r16
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	00 d0       	rcall	.+0      	; 0x4f4 <HID_Device_ProcessControlRequest+0x24>
     4f4:	1f 92       	push	r1
     4f6:	cd b7       	in	r28, 0x3d	; 61
     4f8:	de b7       	in	r29, 0x3e	; 62
     4fa:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     4fc:	ed b6       	in	r14, 0x3d	; 61
     4fe:	fe b6       	in	r15, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     500:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     504:	83 ff       	sbrs	r24, 3
     506:	13 c1       	rjmp	.+550    	; 0x72e <HID_Device_ProcessControlRequest+0x25e>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     508:	f6 01       	movw	r30, r12
     50a:	80 81       	ld	r24, Z
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <USB_ControlRequest+0x4>
     512:	30 91 5b 01 	lds	r19, 0x015B	; 0x80015b <USB_ControlRequest+0x5>
     516:	28 17       	cp	r18, r24
     518:	39 07       	cpc	r19, r25
     51a:	09 f0       	breq	.+2      	; 0x51e <HID_Device_ProcessControlRequest+0x4e>
     51c:	08 c1       	rjmp	.+528    	; 0x72e <HID_Device_ProcessControlRequest+0x25e>
	  return;

	switch (USB_ControlRequest.bRequest)
     51e:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <USB_ControlRequest+0x1>
     522:	83 30       	cpi	r24, 0x03	; 3
     524:	09 f4       	brne	.+2      	; 0x528 <HID_Device_ProcessControlRequest+0x58>
     526:	a0 c0       	rjmp	.+320    	; 0x668 <HID_Device_ProcessControlRequest+0x198>
     528:	30 f4       	brcc	.+12     	; 0x536 <HID_Device_ProcessControlRequest+0x66>
     52a:	81 30       	cpi	r24, 0x01	; 1
     52c:	71 f0       	breq	.+28     	; 0x54a <HID_Device_ProcessControlRequest+0x7a>
     52e:	82 30       	cpi	r24, 0x02	; 2
     530:	09 f4       	brne	.+2      	; 0x534 <HID_Device_ProcessControlRequest+0x64>
     532:	e2 c0       	rjmp	.+452    	; 0x6f8 <HID_Device_ProcessControlRequest+0x228>
     534:	fc c0       	rjmp	.+504    	; 0x72e <HID_Device_ProcessControlRequest+0x25e>
     536:	8a 30       	cpi	r24, 0x0A	; 10
     538:	09 f4       	brne	.+2      	; 0x53c <HID_Device_ProcessControlRequest+0x6c>
     53a:	c2 c0       	rjmp	.+388    	; 0x6c0 <HID_Device_ProcessControlRequest+0x1f0>
     53c:	8b 30       	cpi	r24, 0x0B	; 11
     53e:	09 f4       	brne	.+2      	; 0x542 <HID_Device_ProcessControlRequest+0x72>
     540:	ab c0       	rjmp	.+342    	; 0x698 <HID_Device_ProcessControlRequest+0x1c8>
     542:	89 30       	cpi	r24, 0x09	; 9
     544:	09 f0       	breq	.+2      	; 0x548 <HID_Device_ProcessControlRequest+0x78>
     546:	f3 c0       	rjmp	.+486    	; 0x72e <HID_Device_ProcessControlRequest+0x25e>
     548:	51 c0       	rjmp	.+162    	; 0x5ec <HID_Device_ProcessControlRequest+0x11c>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     54a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <USB_ControlRequest>
     54e:	81 3a       	cpi	r24, 0xA1	; 161
     550:	09 f0       	breq	.+2      	; 0x554 <HID_Device_ProcessControlRequest+0x84>
     552:	ed c0       	rjmp	.+474    	; 0x72e <HID_Device_ProcessControlRequest+0x25e>
			{
     554:	ad b6       	in	r10, 0x3d	; 61
     556:	be b6       	in	r11, 0x3e	; 62
				uint16_t ReportSize = 0;
     558:	1a 82       	std	Y+2, r1	; 0x02
     55a:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     55c:	e6 e5       	ldi	r30, 0x56	; 86
     55e:	f1 e0       	ldi	r31, 0x01	; 1
     560:	82 81       	ldd	r24, Z+2	; 0x02
     562:	13 81       	ldd	r17, Z+3	; 0x03
     564:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     566:	f6 01       	movw	r30, r12
     568:	80 85       	ldd	r24, Z+8	; 0x08
     56a:	48 2f       	mov	r20, r24
     56c:	50 e0       	ldi	r21, 0x00	; 0
     56e:	8d b7       	in	r24, 0x3d	; 61
     570:	9e b7       	in	r25, 0x3e	; 62
     572:	84 1b       	sub	r24, r20
     574:	95 0b       	sbc	r25, r21
     576:	0f b6       	in	r0, 0x3f	; 63
     578:	f8 94       	cli
     57a:	9e bf       	out	0x3e, r25	; 62
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	8d bf       	out	0x3d, r24	; 61
     580:	ed b7       	in	r30, 0x3d	; 61
     582:	fe b7       	in	r31, 0x3e	; 62
     584:	31 96       	adiw	r30, 0x01	; 1
     586:	4f 01       	movw	r8, r30

				memset(ReportData, 0, sizeof(ReportData));
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	cf 01       	movw	r24, r30
     58e:	08 d7       	rcall	.+3600   	; 0x13a0 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     590:	4f ef       	ldi	r20, 0xFF	; 255
     592:	41 0f       	add	r20, r17
     594:	8e 01       	movw	r16, r28
     596:	0f 5f       	subi	r16, 0xFF	; 255
     598:	1f 4f       	sbci	r17, 0xFF	; 255
     59a:	94 01       	movw	r18, r8
     59c:	be 01       	movw	r22, r28
     59e:	6d 5f       	subi	r22, 0xFD	; 253
     5a0:	7f 4f       	sbci	r23, 0xFF	; 255
     5a2:	c6 01       	movw	r24, r12
     5a4:	81 de       	rcall	.-766    	; 0x2a8 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     5a6:	f6 01       	movw	r30, r12
     5a8:	86 81       	ldd	r24, Z+6	; 0x06
     5aa:	97 81       	ldd	r25, Z+7	; 0x07
     5ac:	00 97       	sbiw	r24, 0x00	; 0
     5ae:	21 f0       	breq	.+8      	; 0x5b8 <HID_Device_ProcessControlRequest+0xe8>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     5b0:	40 85       	ldd	r20, Z+8	; 0x08
     5b2:	50 e0       	ldi	r21, 0x00	; 0
     5b4:	b4 01       	movw	r22, r8
     5b6:	eb d6       	rcall	.+3542   	; 0x138e <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     5b8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     5bc:	e8 ee       	ldi	r30, 0xE8	; 232
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	80 81       	ld	r24, Z
     5c2:	87 7f       	andi	r24, 0xF7	; 247
     5c4:	80 83       	st	Z, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
     5c6:	8b 81       	ldd	r24, Y+3	; 0x03
     5c8:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     5ca:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     5ce:	69 81       	ldd	r22, Y+1	; 0x01
     5d0:	7a 81       	ldd	r23, Y+2	; 0x02
     5d2:	c4 01       	movw	r24, r8
     5d4:	f4 d1       	rcall	.+1000   	; 0x9be <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     5d6:	e8 ee       	ldi	r30, 0xE8	; 232
     5d8:	f0 e0       	ldi	r31, 0x00	; 0
     5da:	80 81       	ld	r24, Z
     5dc:	8b 77       	andi	r24, 0x7B	; 123
     5de:	80 83       	st	Z, r24
     5e0:	0f b6       	in	r0, 0x3f	; 63
     5e2:	f8 94       	cli
     5e4:	be be       	out	0x3e, r11	; 62
     5e6:	0f be       	out	0x3f, r0	; 63
     5e8:	ad be       	out	0x3d, r10	; 61
     5ea:	a1 c0       	rjmp	.+322    	; 0x72e <HID_Device_ProcessControlRequest+0x25e>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     5ec:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <USB_ControlRequest>
     5f0:	81 32       	cpi	r24, 0x21	; 33
     5f2:	09 f0       	breq	.+2      	; 0x5f6 <HID_Device_ProcessControlRequest+0x126>
     5f4:	9c c0       	rjmp	.+312    	; 0x72e <HID_Device_ProcessControlRequest+0x25e>
			{
     5f6:	6d b6       	in	r6, 0x3d	; 61
     5f8:	7e b6       	in	r7, 0x3e	; 62
				uint16_t ReportSize = USB_ControlRequest.wLength;
     5fa:	e6 e5       	ldi	r30, 0x56	; 86
     5fc:	f1 e0       	ldi	r31, 0x01	; 1
     5fe:	06 81       	ldd	r16, Z+6	; 0x06
     600:	17 81       	ldd	r17, Z+7	; 0x07
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     602:	52 80       	ldd	r5, Z+2	; 0x02
     604:	43 80       	ldd	r4, Z+3	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     606:	8d b7       	in	r24, 0x3d	; 61
     608:	9e b7       	in	r25, 0x3e	; 62
     60a:	80 1b       	sub	r24, r16
     60c:	91 0b       	sbc	r25, r17
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	f8 94       	cli
     612:	9e bf       	out	0x3e, r25	; 62
     614:	0f be       	out	0x3f, r0	; 63
     616:	8d bf       	out	0x3d, r24	; 61
     618:	ed b7       	in	r30, 0x3d	; 61
     61a:	fe b7       	in	r31, 0x3e	; 62
     61c:	31 96       	adiw	r30, 0x01	; 1
     61e:	4f 01       	movw	r8, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     620:	0f 2e       	mov	r0, r31
     622:	f8 ee       	ldi	r31, 0xE8	; 232
     624:	af 2e       	mov	r10, r31
     626:	b1 2c       	mov	r11, r1
     628:	f0 2d       	mov	r31, r0
     62a:	f5 01       	movw	r30, r10
     62c:	80 81       	ld	r24, Z
     62e:	87 7f       	andi	r24, 0xF7	; 247

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     630:	80 83       	st	Z, r24
     632:	b8 01       	movw	r22, r16
     634:	c4 01       	movw	r24, r8
     636:	42 d2       	rcall	.+1156   	; 0xabc <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     638:	f5 01       	movw	r30, r10
     63a:	80 81       	ld	r24, Z
     63c:	8e 77       	andi	r24, 0x7E	; 126
     63e:	80 83       	st	Z, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     640:	21 e0       	ldi	r18, 0x01	; 1
     642:	51 10       	cpse	r5, r1
     644:	01 c0       	rjmp	.+2      	; 0x648 <HID_Device_ProcessControlRequest+0x178>
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	02 1b       	sub	r16, r18
     64c:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
     64e:	28 0d       	add	r18, r8

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     650:	39 1d       	adc	r19, r9
     652:	4f ef       	ldi	r20, 0xFF	; 255
     654:	44 0d       	add	r20, r4
     656:	65 2d       	mov	r22, r5
     658:	c6 01       	movw	r24, r12
     65a:	42 de       	rcall	.-892    	; 0x2e0 <CALLBACK_HID_Device_ProcessHIDReport>
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	f8 94       	cli
     660:	7e be       	out	0x3e, r7	; 62
     662:	0f be       	out	0x3f, r0	; 63
     664:	6d be       	out	0x3d, r6	; 61
     666:	63 c0       	rjmp	.+198    	; 0x72e <HID_Device_ProcessControlRequest+0x25e>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     668:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <USB_ControlRequest>
     66c:	81 3a       	cpi	r24, 0xA1	; 161
     66e:	09 f0       	breq	.+2      	; 0x672 <HID_Device_ProcessControlRequest+0x1a2>
     670:	5e c0       	rjmp	.+188    	; 0x72e <HID_Device_ProcessControlRequest+0x25e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     672:	e8 ee       	ldi	r30, 0xE8	; 232
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	80 81       	ld	r24, Z
     678:	87 7f       	andi	r24, 0xF7	; 247
     67a:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     67c:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     67e:	80 ff       	sbrs	r24, 0
     680:	fd cf       	rjmp	.-6      	; 0x67c <HID_Device_ProcessControlRequest+0x1ac>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     682:	f6 01       	movw	r30, r12
     684:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     686:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     68a:	e8 ee       	ldi	r30, 0xE8	; 232
     68c:	f0 e0       	ldi	r31, 0x00	; 0
     68e:	80 81       	ld	r24, Z
     690:	8e 77       	andi	r24, 0x7E	; 126
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     692:	80 83       	st	Z, r24
     694:	b1 d3       	rcall	.+1890   	; 0xdf8 <Endpoint_ClearStatusStage>
     696:	4b c0       	rjmp	.+150    	; 0x72e <HID_Device_ProcessControlRequest+0x25e>
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     698:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <USB_ControlRequest>
     69c:	81 32       	cpi	r24, 0x21	; 33
     69e:	09 f0       	breq	.+2      	; 0x6a2 <HID_Device_ProcessControlRequest+0x1d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     6a0:	46 c0       	rjmp	.+140    	; 0x72e <HID_Device_ProcessControlRequest+0x25e>
     6a2:	e8 ee       	ldi	r30, 0xE8	; 232
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	80 81       	ld	r24, Z
     6a8:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     6aa:	80 83       	st	Z, r24
     6ac:	a5 d3       	rcall	.+1866   	; 0xdf8 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     6ae:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <USB_ControlRequest+0x2>
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	91 11       	cpse	r25, r1
     6b6:	01 c0       	rjmp	.+2      	; 0x6ba <HID_Device_ProcessControlRequest+0x1ea>
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	f6 01       	movw	r30, r12
     6bc:	81 87       	std	Z+9, r24	; 0x09
     6be:	37 c0       	rjmp	.+110    	; 0x72e <HID_Device_ProcessControlRequest+0x25e>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     6c0:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <USB_ControlRequest>
     6c4:	81 32       	cpi	r24, 0x21	; 33
     6c6:	99 f5       	brne	.+102    	; 0x72e <HID_Device_ProcessControlRequest+0x25e>
     6c8:	e8 ee       	ldi	r30, 0xE8	; 232
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	80 81       	ld	r24, Z
     6ce:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     6d0:	80 83       	st	Z, r24
     6d2:	92 d3       	rcall	.+1828   	; 0xdf8 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     6d4:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <USB_ControlRequest+0x2>
     6d8:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <USB_ControlRequest+0x3>
     6dc:	88 27       	eor	r24, r24
     6de:	00 24       	eor	r0, r0
     6e0:	88 0f       	add	r24, r24
     6e2:	99 1f       	adc	r25, r25
     6e4:	00 1c       	adc	r0, r0
     6e6:	88 0f       	add	r24, r24
     6e8:	99 1f       	adc	r25, r25
     6ea:	00 1c       	adc	r0, r0
     6ec:	89 2f       	mov	r24, r25
     6ee:	90 2d       	mov	r25, r0
     6f0:	f6 01       	movw	r30, r12
     6f2:	95 87       	std	Z+13, r25	; 0x0d
     6f4:	84 87       	std	Z+12, r24	; 0x0c
     6f6:	1b c0       	rjmp	.+54     	; 0x72e <HID_Device_ProcessControlRequest+0x25e>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     6f8:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <USB_ControlRequest>
     6fc:	81 3a       	cpi	r24, 0xA1	; 161
     6fe:	b9 f4       	brne	.+46     	; 0x72e <HID_Device_ProcessControlRequest+0x25e>
     700:	e8 ee       	ldi	r30, 0xE8	; 232
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	80 81       	ld	r24, Z
     706:	87 7f       	andi	r24, 0xF7	; 247
     708:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     70a:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     70c:	80 ff       	sbrs	r24, 0
     70e:	fd cf       	rjmp	.-6      	; 0x70a <HID_Device_ProcessControlRequest+0x23a>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
     710:	f6 01       	movw	r30, r12
     712:	84 85       	ldd	r24, Z+12	; 0x0c
     714:	95 85       	ldd	r25, Z+13	; 0x0d
     716:	96 95       	lsr	r25
     718:	87 95       	ror	r24
     71a:	96 95       	lsr	r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     71c:	87 95       	ror	r24
     71e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     722:	e8 ee       	ldi	r30, 0xE8	; 232
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	80 81       	ld	r24, Z
     728:	8e 77       	andi	r24, 0x7E	; 126
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     72a:	80 83       	st	Z, r24
     72c:	65 d3       	rcall	.+1738   	; 0xdf8 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	f8 94       	cli
     732:	fe be       	out	0x3e, r15	; 62
     734:	0f be       	out	0x3f, r0	; 63
     736:	ed be       	out	0x3d, r14	; 61
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
     73e:	df 91       	pop	r29
     740:	cf 91       	pop	r28
     742:	1f 91       	pop	r17
     744:	0f 91       	pop	r16
     746:	ff 90       	pop	r15
     748:	ef 90       	pop	r14
     74a:	df 90       	pop	r13
     74c:	cf 90       	pop	r12
     74e:	bf 90       	pop	r11
     750:	af 90       	pop	r10
     752:	9f 90       	pop	r9
     754:	8f 90       	pop	r8
     756:	7f 90       	pop	r7
     758:	6f 90       	pop	r6
     75a:	5f 90       	pop	r5
     75c:	4f 90       	pop	r4
     75e:	3f 90       	pop	r3
     760:	08 95       	ret

00000762 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
     762:	fc 01       	movw	r30, r24
     764:	39 96       	adiw	r30, 0x09	; 9
     766:	27 e0       	ldi	r18, 0x07	; 7
     768:	df 01       	movw	r26, r30
     76a:	1d 92       	st	X+, r1
     76c:	2a 95       	dec	r18
     76e:	e9 f7       	brne	.-6      	; 0x76a <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     770:	21 e0       	ldi	r18, 0x01	; 1
     772:	fc 01       	movw	r30, r24
     774:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
     776:	24 ef       	ldi	r18, 0xF4	; 244
     778:	31 e0       	ldi	r19, 0x01	; 1
     77a:	35 87       	std	Z+13, r19	; 0x0d
     77c:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
     77e:	23 e0       	ldi	r18, 0x03	; 3
     780:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
     782:	61 e0       	ldi	r22, 0x01	; 1
     784:	01 96       	adiw	r24, 0x01	; 1
     786:	e9 c2       	rjmp	.+1490   	; 0xd5a <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
     788:	08 95       	ret

0000078a <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     78a:	5f 92       	push	r5
     78c:	6f 92       	push	r6
     78e:	7f 92       	push	r7
     790:	8f 92       	push	r8
     792:	9f 92       	push	r9
     794:	af 92       	push	r10
     796:	bf 92       	push	r11
     798:	cf 92       	push	r12
     79a:	df 92       	push	r13
     79c:	ef 92       	push	r14
     79e:	ff 92       	push	r15
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	00 d0       	rcall	.+0      	; 0x7aa <HID_Device_USBTask+0x20>
     7aa:	1f 92       	push	r1
     7ac:	cd b7       	in	r28, 0x3d	; 61
     7ae:	de b7       	in	r29, 0x3e	; 62
     7b0:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
     7b2:	ad b6       	in	r10, 0x3d	; 61
     7b4:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     7b6:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <USB_DeviceState>
     7ba:	84 30       	cpi	r24, 0x04	; 4
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <HID_Device_USBTask+0x36>
     7be:	8a c0       	rjmp	.+276    	; 0x8d4 <HID_Device_USBTask+0x14a>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     7c0:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     7c4:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
     7c8:	f7 01       	movw	r30, r14
     7ca:	22 85       	ldd	r18, Z+10	; 0x0a
     7cc:	33 85       	ldd	r19, Z+11	; 0x0b
     7ce:	28 17       	cp	r18, r24
     7d0:	39 07       	cpc	r19, r25
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <HID_Device_USBTask+0x4c>
     7d4:	7f c0       	rjmp	.+254    	; 0x8d4 <HID_Device_USBTask+0x14a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     7d6:	81 81       	ldd	r24, Z+1	; 0x01
     7d8:	8f 70       	andi	r24, 0x0F	; 15
     7da:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     7de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
     7e2:	85 ff       	sbrs	r24, 5
     7e4:	77 c0       	rjmp	.+238    	; 0x8d4 <HID_Device_USBTask+0x14a>
	{
     7e6:	8d b6       	in	r8, 0x3d	; 61
     7e8:	9e b6       	in	r9, 0x3e	; 62
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     7ea:	40 85       	ldd	r20, Z+8	; 0x08
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	8d b7       	in	r24, 0x3d	; 61
     7f0:	9e b7       	in	r25, 0x3e	; 62
     7f2:	84 1b       	sub	r24, r20
     7f4:	95 0b       	sbc	r25, r21
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	f8 94       	cli
     7fa:	9e bf       	out	0x3e, r25	; 62
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	8d bf       	out	0x3d, r24	; 61
     800:	ed b7       	in	r30, 0x3d	; 61
     802:	fe b7       	in	r31, 0x3e	; 62
     804:	31 96       	adiw	r30, 0x01	; 1
     806:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
     808:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
     80a:	1a 82       	std	Y+2, r1	; 0x02
     80c:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
     80e:	60 e0       	ldi	r22, 0x00	; 0
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	cf 01       	movw	r24, r30
     814:	c5 d5       	rcall	.+2954   	; 0x13a0 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
     816:	8e 01       	movw	r16, r28
     818:	0f 5f       	subi	r16, 0xFF	; 255
     81a:	1f 4f       	sbci	r17, 0xFF	; 255
     81c:	96 01       	movw	r18, r12
     81e:	40 e0       	ldi	r20, 0x00	; 0
     820:	be 01       	movw	r22, r28
     822:	6d 5f       	subi	r22, 0xFD	; 253
     824:	7f 4f       	sbci	r23, 0xFF	; 255
     826:	c7 01       	movw	r24, r14
     828:	3f dd       	rcall	.-1410   	; 0x2a8 <CALLBACK_HID_Device_CreateHIDReport>
     82a:	58 2e       	mov	r5, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
     82c:	f7 01       	movw	r30, r14
     82e:	84 85       	ldd	r24, Z+12	; 0x0c
     830:	95 85       	ldd	r25, Z+13	; 0x0d
     832:	89 2b       	or	r24, r25
     834:	41 f0       	breq	.+16     	; 0x846 <HID_Device_USBTask+0xbc>
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	26 85       	ldd	r18, Z+14	; 0x0e
     83a:	37 85       	ldd	r19, Z+15	; 0x0f
     83c:	23 2b       	or	r18, r19
     83e:	09 f0       	breq	.+2      	; 0x842 <HID_Device_USBTask+0xb8>
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	78 2e       	mov	r7, r24
     844:	01 c0       	rjmp	.+2      	; 0x848 <HID_Device_USBTask+0xbe>
     846:	71 2c       	mov	r7, r1

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     848:	f7 01       	movw	r30, r14
     84a:	06 81       	ldd	r16, Z+6	; 0x06
     84c:	17 81       	ldd	r17, Z+7	; 0x07
     84e:	01 15       	cp	r16, r1
     850:	11 05       	cpc	r17, r1
     852:	89 f0       	breq	.+34     	; 0x876 <HID_Device_USBTask+0xec>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
     854:	49 81       	ldd	r20, Y+1	; 0x01
     856:	5a 81       	ldd	r21, Y+2	; 0x02
     858:	b8 01       	movw	r22, r16
     85a:	c6 01       	movw	r24, r12
     85c:	8b d5       	rcall	.+2838   	; 0x1374 <memcmp>
     85e:	66 24       	eor	r6, r6
     860:	63 94       	inc	r6
     862:	89 2b       	or	r24, r25
     864:	09 f4       	brne	.+2      	; 0x868 <HID_Device_USBTask+0xde>
     866:	61 2c       	mov	r6, r1
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
     868:	f7 01       	movw	r30, r14
     86a:	40 85       	ldd	r20, Z+8	; 0x08
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	b6 01       	movw	r22, r12
     870:	c8 01       	movw	r24, r16
     872:	8d d5       	rcall	.+2842   	; 0x138e <memcpy>
     874:	01 c0       	rjmp	.+2      	; 0x878 <HID_Device_USBTask+0xee>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
     876:	61 2c       	mov	r6, r1
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
     878:	89 81       	ldd	r24, Y+1	; 0x01
     87a:	9a 81       	ldd	r25, Y+2	; 0x02
     87c:	89 2b       	or	r24, r25
     87e:	f1 f0       	breq	.+60     	; 0x8bc <HID_Device_USBTask+0x132>
     880:	51 10       	cpse	r5, r1
     882:	04 c0       	rjmp	.+8      	; 0x88c <HID_Device_USBTask+0x102>
     884:	61 10       	cpse	r6, r1
     886:	02 c0       	rjmp	.+4      	; 0x88c <HID_Device_USBTask+0x102>
     888:	70 fe       	sbrs	r7, 0
     88a:	18 c0       	rjmp	.+48     	; 0x8bc <HID_Device_USBTask+0x132>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
     88c:	f7 01       	movw	r30, r14
     88e:	84 85       	ldd	r24, Z+12	; 0x0c
     890:	95 85       	ldd	r25, Z+13	; 0x0d
     892:	97 87       	std	Z+15, r25	; 0x0f
     894:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     896:	81 81       	ldd	r24, Z+1	; 0x01
     898:	8f 70       	andi	r24, 0x0F	; 15
     89a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
     89e:	8b 81       	ldd	r24, Y+3	; 0x03
     8a0:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     8a2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
     8a6:	69 81       	ldd	r22, Y+1	; 0x01
     8a8:	7a 81       	ldd	r23, Y+2	; 0x02
     8aa:	40 e0       	ldi	r20, 0x00	; 0
     8ac:	50 e0       	ldi	r21, 0x00	; 0
     8ae:	c6 01       	movw	r24, r12
     8b0:	29 d0       	rcall	.+82     	; 0x904 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     8b2:	e8 ee       	ldi	r30, 0xE8	; 232
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	80 81       	ld	r24, Z
     8b8:	8e 77       	andi	r24, 0x7E	; 126
     8ba:	80 83       	st	Z, r24
     8bc:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     8c0:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
     8c4:	f7 01       	movw	r30, r14
     8c6:	93 87       	std	Z+11, r25	; 0x0b
     8c8:	82 87       	std	Z+10, r24	; 0x0a
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	f8 94       	cli
     8ce:	9e be       	out	0x3e, r9	; 62
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	8d be       	out	0x3d, r8	; 61
	}
}
     8d4:	0f b6       	in	r0, 0x3f	; 63
     8d6:	f8 94       	cli
     8d8:	be be       	out	0x3e, r11	; 62
     8da:	0f be       	out	0x3f, r0	; 63
     8dc:	ad be       	out	0x3d, r10	; 61
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	1f 91       	pop	r17
     8ea:	0f 91       	pop	r16
     8ec:	ff 90       	pop	r15
     8ee:	ef 90       	pop	r14
     8f0:	df 90       	pop	r13
     8f2:	cf 90       	pop	r12
     8f4:	bf 90       	pop	r11
     8f6:	af 90       	pop	r10
     8f8:	9f 90       	pop	r9
     8fa:	8f 90       	pop	r8
     8fc:	7f 90       	pop	r7
     8fe:	6f 90       	pop	r6
     900:	5f 90       	pop	r5
     902:	08 95       	ret

00000904 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     904:	8f 92       	push	r8
     906:	9f 92       	push	r9
     908:	af 92       	push	r10
     90a:	bf 92       	push	r11
     90c:	cf 92       	push	r12
     90e:	df 92       	push	r13
     910:	ef 92       	push	r14
     912:	ff 92       	push	r15
     914:	0f 93       	push	r16
     916:	1f 93       	push	r17
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	8c 01       	movw	r16, r24
     91e:	eb 01       	movw	r28, r22
     920:	5a 01       	movw	r10, r20
     922:	8e d2       	rcall	.+1308   	; 0xe40 <Endpoint_WaitUntilReady>
     924:	81 11       	cpse	r24, r1
     926:	3e c0       	rjmp	.+124    	; 0x9a4 <Endpoint_Write_Stream_LE+0xa0>
     928:	a1 14       	cp	r10, r1
     92a:	b1 04       	cpc	r11, r1
     92c:	39 f0       	breq	.+14     	; 0x93c <Endpoint_Write_Stream_LE+0x38>
     92e:	f5 01       	movw	r30, r10
     930:	80 81       	ld	r24, Z
     932:	91 81       	ldd	r25, Z+1	; 0x01
     934:	c8 1b       	sub	r28, r24
     936:	d9 0b       	sbc	r29, r25
     938:	08 0f       	add	r16, r24
     93a:	19 1f       	adc	r17, r25
     93c:	20 97       	sbiw	r28, 0x00	; 0
     93e:	89 f1       	breq	.+98     	; 0x9a2 <Endpoint_Write_Stream_LE+0x9e>
     940:	e1 2c       	mov	r14, r1
     942:	f1 2c       	mov	r15, r1
     944:	0f 2e       	mov	r0, r31
     946:	f8 ee       	ldi	r31, 0xE8	; 232
     948:	8f 2e       	mov	r8, r31
     94a:	91 2c       	mov	r9, r1
     94c:	f0 2d       	mov	r31, r0
     94e:	0f 2e       	mov	r0, r31
     950:	f1 ef       	ldi	r31, 0xF1	; 241
     952:	cf 2e       	mov	r12, r31
     954:	d1 2c       	mov	r13, r1
     956:	f0 2d       	mov	r31, r0
     958:	f4 01       	movw	r30, r8
     95a:	80 81       	ld	r24, Z
     95c:	85 fd       	sbrc	r24, 5
     95e:	14 c0       	rjmp	.+40     	; 0x988 <Endpoint_Write_Stream_LE+0x84>
     960:	80 81       	ld	r24, Z
     962:	8e 77       	andi	r24, 0x7E	; 126
     964:	80 83       	st	Z, r24
     966:	ec d4       	rcall	.+2520   	; 0x1340 <USB_USBTask>
     968:	a1 14       	cp	r10, r1
     96a:	b1 04       	cpc	r11, r1
     96c:	49 f0       	breq	.+18     	; 0x980 <Endpoint_Write_Stream_LE+0x7c>
     96e:	f5 01       	movw	r30, r10
     970:	80 81       	ld	r24, Z
     972:	91 81       	ldd	r25, Z+1	; 0x01
     974:	e8 0e       	add	r14, r24
     976:	f9 1e       	adc	r15, r25
     978:	f1 82       	std	Z+1, r15	; 0x01
     97a:	e0 82       	st	Z, r14
     97c:	85 e0       	ldi	r24, 0x05	; 5
     97e:	12 c0       	rjmp	.+36     	; 0x9a4 <Endpoint_Write_Stream_LE+0xa0>
     980:	5f d2       	rcall	.+1214   	; 0xe40 <Endpoint_WaitUntilReady>
     982:	88 23       	and	r24, r24
     984:	51 f0       	breq	.+20     	; 0x99a <Endpoint_Write_Stream_LE+0x96>
     986:	0e c0       	rjmp	.+28     	; 0x9a4 <Endpoint_Write_Stream_LE+0xa0>
     988:	f8 01       	movw	r30, r16
     98a:	81 91       	ld	r24, Z+
     98c:	8f 01       	movw	r16, r30
     98e:	f6 01       	movw	r30, r12
     990:	80 83       	st	Z, r24
     992:	21 97       	sbiw	r28, 0x01	; 1
     994:	ff ef       	ldi	r31, 0xFF	; 255
     996:	ef 1a       	sub	r14, r31
     998:	ff 0a       	sbc	r15, r31
     99a:	20 97       	sbiw	r28, 0x00	; 0
     99c:	e9 f6       	brne	.-70     	; 0x958 <Endpoint_Write_Stream_LE+0x54>
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	01 c0       	rjmp	.+2      	; 0x9a4 <Endpoint_Write_Stream_LE+0xa0>
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	1f 91       	pop	r17
     9aa:	0f 91       	pop	r16
     9ac:	ff 90       	pop	r15
     9ae:	ef 90       	pop	r14
     9b0:	df 90       	pop	r13
     9b2:	cf 90       	pop	r12
     9b4:	bf 90       	pop	r11
     9b6:	af 90       	pop	r10
     9b8:	9f 90       	pop	r9
     9ba:	8f 90       	pop	r8
     9bc:	08 95       	ret

000009be <Endpoint_Write_Control_Stream_LE>:
     9be:	ef 92       	push	r14
     9c0:	ff 92       	push	r15
     9c2:	0f 93       	push	r16
     9c4:	1f 93       	push	r17
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <USB_ControlRequest+0x6>
     9ce:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <USB_ControlRequest+0x7>
     9d2:	26 17       	cp	r18, r22
     9d4:	37 07       	cpc	r19, r23
     9d6:	58 f0       	brcs	.+22     	; 0x9ee <Endpoint_Write_Control_Stream_LE+0x30>
     9d8:	61 15       	cp	r22, r1
     9da:	71 05       	cpc	r23, r1
     9dc:	39 f4       	brne	.+14     	; 0x9ec <Endpoint_Write_Control_Stream_LE+0x2e>
     9de:	e8 ee       	ldi	r30, 0xE8	; 232
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	20 81       	ld	r18, Z
     9e4:	2e 77       	andi	r18, 0x7E	; 126
     9e6:	20 83       	st	Z, r18
     9e8:	9b 01       	movw	r18, r22
     9ea:	01 c0       	rjmp	.+2      	; 0x9ee <Endpoint_Write_Control_Stream_LE+0x30>
     9ec:	9b 01       	movw	r18, r22
     9ee:	a8 2f       	mov	r26, r24
     9f0:	b9 2f       	mov	r27, r25
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	e8 ee       	ldi	r30, 0xE8	; 232
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	62 ef       	ldi	r22, 0xF2	; 242
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	0f 2e       	mov	r0, r31
     9fe:	f1 ef       	ldi	r31, 0xF1	; 241
     a00:	ef 2e       	mov	r14, r31
     a02:	f1 2c       	mov	r15, r1
     a04:	f0 2d       	mov	r31, r0
     a06:	11 e0       	ldi	r17, 0x01	; 1
     a08:	00 e0       	ldi	r16, 0x00	; 0
     a0a:	2f c0       	rjmp	.+94     	; 0xa6a <Endpoint_Write_Control_Stream_LE+0xac>
     a0c:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <USB_DeviceState>
     a10:	88 23       	and	r24, r24
     a12:	09 f4       	brne	.+2      	; 0xa16 <Endpoint_Write_Control_Stream_LE+0x58>
     a14:	41 c0       	rjmp	.+130    	; 0xa98 <Endpoint_Write_Control_Stream_LE+0xda>
     a16:	85 30       	cpi	r24, 0x05	; 5
     a18:	09 f4       	brne	.+2      	; 0xa1c <Endpoint_Write_Control_Stream_LE+0x5e>
     a1a:	40 c0       	rjmp	.+128    	; 0xa9c <Endpoint_Write_Control_Stream_LE+0xde>
     a1c:	80 81       	ld	r24, Z
     a1e:	83 fd       	sbrc	r24, 3
     a20:	3f c0       	rjmp	.+126    	; 0xaa0 <Endpoint_Write_Control_Stream_LE+0xe2>
     a22:	80 81       	ld	r24, Z
     a24:	82 fd       	sbrc	r24, 2
     a26:	31 c0       	rjmp	.+98     	; 0xa8a <Endpoint_Write_Control_Stream_LE+0xcc>
     a28:	80 81       	ld	r24, Z
     a2a:	80 ff       	sbrs	r24, 0
     a2c:	1e c0       	rjmp	.+60     	; 0xa6a <Endpoint_Write_Control_Stream_LE+0xac>
     a2e:	eb 01       	movw	r28, r22
     a30:	48 81       	ld	r20, Y
     a32:	59 81       	ldd	r21, Y+1	; 0x01
     a34:	21 15       	cp	r18, r1
     a36:	31 05       	cpc	r19, r1
     a38:	81 f0       	breq	.+32     	; 0xa5a <Endpoint_Write_Control_Stream_LE+0x9c>
     a3a:	48 30       	cpi	r20, 0x08	; 8
     a3c:	51 05       	cpc	r21, r1
     a3e:	68 f4       	brcc	.+26     	; 0xa5a <Endpoint_Write_Control_Stream_LE+0x9c>
     a40:	8d 91       	ld	r24, X+
     a42:	e7 01       	movw	r28, r14
     a44:	88 83       	st	Y, r24
     a46:	21 50       	subi	r18, 0x01	; 1
     a48:	31 09       	sbc	r19, r1
     a4a:	4f 5f       	subi	r20, 0xFF	; 255
     a4c:	5f 4f       	sbci	r21, 0xFF	; 255
     a4e:	21 15       	cp	r18, r1
     a50:	31 05       	cpc	r19, r1
     a52:	19 f0       	breq	.+6      	; 0xa5a <Endpoint_Write_Control_Stream_LE+0x9c>
     a54:	48 30       	cpi	r20, 0x08	; 8
     a56:	51 05       	cpc	r21, r1
     a58:	99 f7       	brne	.-26     	; 0xa40 <Endpoint_Write_Control_Stream_LE+0x82>
     a5a:	91 2f       	mov	r25, r17
     a5c:	48 30       	cpi	r20, 0x08	; 8
     a5e:	51 05       	cpc	r21, r1
     a60:	09 f0       	breq	.+2      	; 0xa64 <Endpoint_Write_Control_Stream_LE+0xa6>
     a62:	90 2f       	mov	r25, r16
     a64:	80 81       	ld	r24, Z
     a66:	8e 77       	andi	r24, 0x7E	; 126
     a68:	80 83       	st	Z, r24
     a6a:	21 15       	cp	r18, r1
     a6c:	31 05       	cpc	r19, r1
     a6e:	71 f6       	brne	.-100    	; 0xa0c <Endpoint_Write_Control_Stream_LE+0x4e>
     a70:	91 11       	cpse	r25, r1
     a72:	cc cf       	rjmp	.-104    	; 0xa0c <Endpoint_Write_Control_Stream_LE+0x4e>
     a74:	0a c0       	rjmp	.+20     	; 0xa8a <Endpoint_Write_Control_Stream_LE+0xcc>
     a76:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <USB_DeviceState>
     a7a:	88 23       	and	r24, r24
     a7c:	99 f0       	breq	.+38     	; 0xaa4 <Endpoint_Write_Control_Stream_LE+0xe6>
     a7e:	85 30       	cpi	r24, 0x05	; 5
     a80:	99 f0       	breq	.+38     	; 0xaa8 <Endpoint_Write_Control_Stream_LE+0xea>
     a82:	80 81       	ld	r24, Z
     a84:	83 ff       	sbrs	r24, 3
     a86:	03 c0       	rjmp	.+6      	; 0xa8e <Endpoint_Write_Control_Stream_LE+0xd0>
     a88:	11 c0       	rjmp	.+34     	; 0xaac <Endpoint_Write_Control_Stream_LE+0xee>
     a8a:	e8 ee       	ldi	r30, 0xE8	; 232
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	80 81       	ld	r24, Z
     a90:	82 ff       	sbrs	r24, 2
     a92:	f1 cf       	rjmp	.-30     	; 0xa76 <Endpoint_Write_Control_Stream_LE+0xb8>
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	0b c0       	rjmp	.+22     	; 0xaae <Endpoint_Write_Control_Stream_LE+0xf0>
     a98:	82 e0       	ldi	r24, 0x02	; 2
     a9a:	09 c0       	rjmp	.+18     	; 0xaae <Endpoint_Write_Control_Stream_LE+0xf0>
     a9c:	83 e0       	ldi	r24, 0x03	; 3
     a9e:	07 c0       	rjmp	.+14     	; 0xaae <Endpoint_Write_Control_Stream_LE+0xf0>
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	05 c0       	rjmp	.+10     	; 0xaae <Endpoint_Write_Control_Stream_LE+0xf0>
     aa4:	82 e0       	ldi	r24, 0x02	; 2
     aa6:	03 c0       	rjmp	.+6      	; 0xaae <Endpoint_Write_Control_Stream_LE+0xf0>
     aa8:	83 e0       	ldi	r24, 0x03	; 3
     aaa:	01 c0       	rjmp	.+2      	; 0xaae <Endpoint_Write_Control_Stream_LE+0xf0>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	1f 91       	pop	r17
     ab4:	0f 91       	pop	r16
     ab6:	ff 90       	pop	r15
     ab8:	ef 90       	pop	r14
     aba:	08 95       	ret

00000abc <Endpoint_Read_Control_Stream_LE>:
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
     ac0:	61 15       	cp	r22, r1
     ac2:	71 05       	cpc	r23, r1
     ac4:	39 f5       	brne	.+78     	; 0xb14 <Endpoint_Read_Control_Stream_LE+0x58>
     ac6:	e8 ee       	ldi	r30, 0xE8	; 232
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	80 81       	ld	r24, Z
     acc:	8b 77       	andi	r24, 0x7B	; 123
     ace:	80 83       	st	Z, r24
     ad0:	3d c0       	rjmp	.+122    	; 0xb4c <Endpoint_Read_Control_Stream_LE+0x90>
     ad2:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <USB_DeviceState>
     ad6:	88 23       	and	r24, r24
     ad8:	09 f4       	brne	.+2      	; 0xadc <Endpoint_Read_Control_Stream_LE+0x20>
     ada:	3f c0       	rjmp	.+126    	; 0xb5a <Endpoint_Read_Control_Stream_LE+0x9e>
     adc:	85 30       	cpi	r24, 0x05	; 5
     ade:	09 f4       	brne	.+2      	; 0xae2 <Endpoint_Read_Control_Stream_LE+0x26>
     ae0:	3e c0       	rjmp	.+124    	; 0xb5e <Endpoint_Read_Control_Stream_LE+0xa2>
     ae2:	80 81       	ld	r24, Z
     ae4:	83 fd       	sbrc	r24, 3
     ae6:	3d c0       	rjmp	.+122    	; 0xb62 <Endpoint_Read_Control_Stream_LE+0xa6>
     ae8:	80 81       	ld	r24, Z
     aea:	82 ff       	sbrs	r24, 2
     aec:	f2 cf       	rjmp	.-28     	; 0xad2 <Endpoint_Read_Control_Stream_LE+0x16>
     aee:	45 c0       	rjmp	.+138    	; 0xb7a <Endpoint_Read_Control_Stream_LE+0xbe>
     af0:	e9 01       	movw	r28, r18
     af2:	88 81       	ld	r24, Y
     af4:	8d 93       	st	X+, r24
     af6:	61 50       	subi	r22, 0x01	; 1
     af8:	71 09       	sbc	r23, r1
     afa:	29 f0       	breq	.+10     	; 0xb06 <Endpoint_Read_Control_Stream_LE+0x4a>
     afc:	ea 01       	movw	r28, r20
     afe:	88 81       	ld	r24, Y
     b00:	99 81       	ldd	r25, Y+1	; 0x01
     b02:	89 2b       	or	r24, r25
     b04:	a9 f7       	brne	.-22     	; 0xaf0 <Endpoint_Read_Control_Stream_LE+0x34>
     b06:	80 81       	ld	r24, Z
     b08:	8b 77       	andi	r24, 0x7B	; 123
     b0a:	80 83       	st	Z, r24
     b0c:	61 15       	cp	r22, r1
     b0e:	71 05       	cpc	r23, r1
     b10:	49 f4       	brne	.+18     	; 0xb24 <Endpoint_Read_Control_Stream_LE+0x68>
     b12:	1c c0       	rjmp	.+56     	; 0xb4c <Endpoint_Read_Control_Stream_LE+0x90>
     b14:	a8 2f       	mov	r26, r24
     b16:	b9 2f       	mov	r27, r25
     b18:	e8 ee       	ldi	r30, 0xE8	; 232
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	42 ef       	ldi	r20, 0xF2	; 242
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	21 ef       	ldi	r18, 0xF1	; 241
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <USB_DeviceState>
     b28:	88 23       	and	r24, r24
     b2a:	e9 f0       	breq	.+58     	; 0xb66 <Endpoint_Read_Control_Stream_LE+0xaa>
     b2c:	85 30       	cpi	r24, 0x05	; 5
     b2e:	e9 f0       	breq	.+58     	; 0xb6a <Endpoint_Read_Control_Stream_LE+0xae>
     b30:	80 81       	ld	r24, Z
     b32:	83 fd       	sbrc	r24, 3
     b34:	1c c0       	rjmp	.+56     	; 0xb6e <Endpoint_Read_Control_Stream_LE+0xb2>
     b36:	80 81       	ld	r24, Z
     b38:	82 fd       	sbrc	r24, 2
     b3a:	1f c0       	rjmp	.+62     	; 0xb7a <Endpoint_Read_Control_Stream_LE+0xbe>
     b3c:	ca cf       	rjmp	.-108    	; 0xad2 <Endpoint_Read_Control_Stream_LE+0x16>
     b3e:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <USB_DeviceState>
     b42:	88 23       	and	r24, r24
     b44:	b1 f0       	breq	.+44     	; 0xb72 <Endpoint_Read_Control_Stream_LE+0xb6>
     b46:	85 30       	cpi	r24, 0x05	; 5
     b48:	19 f4       	brne	.+6      	; 0xb50 <Endpoint_Read_Control_Stream_LE+0x94>
     b4a:	15 c0       	rjmp	.+42     	; 0xb76 <Endpoint_Read_Control_Stream_LE+0xba>
     b4c:	e8 ee       	ldi	r30, 0xE8	; 232
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	80 81       	ld	r24, Z
     b52:	80 ff       	sbrs	r24, 0
     b54:	f4 cf       	rjmp	.-24     	; 0xb3e <Endpoint_Read_Control_Stream_LE+0x82>
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	17 c0       	rjmp	.+46     	; 0xb88 <Endpoint_Read_Control_Stream_LE+0xcc>
     b5a:	82 e0       	ldi	r24, 0x02	; 2
     b5c:	15 c0       	rjmp	.+42     	; 0xb88 <Endpoint_Read_Control_Stream_LE+0xcc>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	13 c0       	rjmp	.+38     	; 0xb88 <Endpoint_Read_Control_Stream_LE+0xcc>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	11 c0       	rjmp	.+34     	; 0xb88 <Endpoint_Read_Control_Stream_LE+0xcc>
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	0f c0       	rjmp	.+30     	; 0xb88 <Endpoint_Read_Control_Stream_LE+0xcc>
     b6a:	83 e0       	ldi	r24, 0x03	; 3
     b6c:	0d c0       	rjmp	.+26     	; 0xb88 <Endpoint_Read_Control_Stream_LE+0xcc>
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	0b c0       	rjmp	.+22     	; 0xb88 <Endpoint_Read_Control_Stream_LE+0xcc>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	09 c0       	rjmp	.+18     	; 0xb88 <Endpoint_Read_Control_Stream_LE+0xcc>
     b76:	83 e0       	ldi	r24, 0x03	; 3
     b78:	07 c0       	rjmp	.+14     	; 0xb88 <Endpoint_Read_Control_Stream_LE+0xcc>
     b7a:	ea 01       	movw	r28, r20
     b7c:	88 81       	ld	r24, Y
     b7e:	99 81       	ldd	r25, Y+1	; 0x01
     b80:	89 2b       	or	r24, r25
     b82:	09 f0       	breq	.+2      	; 0xb86 <Endpoint_Read_Control_Stream_LE+0xca>
     b84:	b5 cf       	rjmp	.-150    	; 0xaf0 <Endpoint_Read_Control_Stream_LE+0x34>
     b86:	bf cf       	rjmp	.-130    	; 0xb06 <Endpoint_Read_Control_Stream_LE+0x4a>
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	08 95       	ret

00000b8e <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     b8e:	ef 92       	push	r14
     b90:	ff 92       	push	r15
     b92:	0f 93       	push	r16
     b94:	1f 93       	push	r17
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     b9a:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <USB_ControlRequest+0x6>
     b9e:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <USB_ControlRequest+0x7>
     ba2:	26 17       	cp	r18, r22
     ba4:	37 07       	cpc	r19, r23
     ba6:	58 f0       	brcs	.+22     	; 0xbbe <Endpoint_Write_Control_PStream_LE+0x30>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     ba8:	61 15       	cp	r22, r1
     baa:	71 05       	cpc	r23, r1
     bac:	39 f4       	brne	.+14     	; 0xbbc <Endpoint_Write_Control_PStream_LE+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bae:	e8 ee       	ldi	r30, 0xE8	; 232
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	20 81       	ld	r18, Z
     bb4:	2e 77       	andi	r18, 0x7E	; 126
     bb6:	20 83       	st	Z, r18
     bb8:	9b 01       	movw	r18, r22
     bba:	01 c0       	rjmp	.+2      	; 0xbbe <Endpoint_Write_Control_PStream_LE+0x30>
     bbc:	9b 01       	movw	r18, r22
     bbe:	e8 2f       	mov	r30, r24
     bc0:	f9 2f       	mov	r31, r25
     bc2:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bc4:	a8 ee       	ldi	r26, 0xE8	; 232
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     bc8:	62 ef       	ldi	r22, 0xF2	; 242
     bca:	70 e0       	ldi	r23, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     bcc:	0f 2e       	mov	r0, r31
     bce:	f1 ef       	ldi	r31, 0xF1	; 241
     bd0:	ef 2e       	mov	r14, r31
     bd2:	f1 2c       	mov	r15, r1
     bd4:	f0 2d       	mov	r31, r0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     bd6:	11 e0       	ldi	r17, 0x01	; 1
     bd8:	00 e0       	ldi	r16, 0x00	; 0
     bda:	30 c0       	rjmp	.+96     	; 0xc3c <Endpoint_Write_Control_PStream_LE+0xae>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     bdc:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     be0:	88 23       	and	r24, r24
     be2:	09 f4       	brne	.+2      	; 0xbe6 <Endpoint_Write_Control_PStream_LE+0x58>
     be4:	42 c0       	rjmp	.+132    	; 0xc6a <Endpoint_Write_Control_PStream_LE+0xdc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     be6:	85 30       	cpi	r24, 0x05	; 5
     be8:	09 f4       	brne	.+2      	; 0xbec <Endpoint_Write_Control_PStream_LE+0x5e>
     bea:	41 c0       	rjmp	.+130    	; 0xc6e <Endpoint_Write_Control_PStream_LE+0xe0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bec:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     bee:	83 fd       	sbrc	r24, 3
     bf0:	40 c0       	rjmp	.+128    	; 0xc72 <Endpoint_Write_Control_PStream_LE+0xe4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     bf2:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     bf4:	82 fd       	sbrc	r24, 2
     bf6:	32 c0       	rjmp	.+100    	; 0xc5c <Endpoint_Write_Control_PStream_LE+0xce>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     bf8:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
     bfa:	80 ff       	sbrs	r24, 0
     bfc:	1f c0       	rjmp	.+62     	; 0xc3c <Endpoint_Write_Control_PStream_LE+0xae>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     bfe:	eb 01       	movw	r28, r22
     c00:	48 81       	ld	r20, Y
     c02:	59 81       	ldd	r21, Y+1	; 0x01
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     c04:	21 15       	cp	r18, r1
     c06:	31 05       	cpc	r19, r1
     c08:	89 f0       	breq	.+34     	; 0xc2c <Endpoint_Write_Control_PStream_LE+0x9e>
     c0a:	48 30       	cpi	r20, 0x08	; 8
     c0c:	51 05       	cpc	r21, r1
     c0e:	70 f4       	brcc	.+28     	; 0xc2c <Endpoint_Write_Control_PStream_LE+0x9e>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     c10:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c12:	e7 01       	movw	r28, r14
     c14:	88 83       	st	Y, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     c16:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     c18:	21 50       	subi	r18, 0x01	; 1
     c1a:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
     c1c:	4f 5f       	subi	r20, 0xFF	; 255
     c1e:	5f 4f       	sbci	r21, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     c20:	21 15       	cp	r18, r1
     c22:	31 05       	cpc	r19, r1
     c24:	19 f0       	breq	.+6      	; 0xc2c <Endpoint_Write_Control_PStream_LE+0x9e>
     c26:	48 30       	cpi	r20, 0x08	; 8
     c28:	51 05       	cpc	r21, r1
     c2a:	91 f7       	brne	.-28     	; 0xc10 <Endpoint_Write_Control_PStream_LE+0x82>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     c2c:	91 2f       	mov	r25, r17
     c2e:	48 30       	cpi	r20, 0x08	; 8
     c30:	51 05       	cpc	r21, r1
     c32:	09 f0       	breq	.+2      	; 0xc36 <Endpoint_Write_Control_PStream_LE+0xa8>
     c34:	90 2f       	mov	r25, r16
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c36:	8c 91       	ld	r24, X
     c38:	8e 77       	andi	r24, 0x7E	; 126
     c3a:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     c3c:	21 15       	cp	r18, r1
     c3e:	31 05       	cpc	r19, r1
     c40:	69 f6       	brne	.-102    	; 0xbdc <Endpoint_Write_Control_PStream_LE+0x4e>
     c42:	91 11       	cpse	r25, r1
     c44:	cb cf       	rjmp	.-106    	; 0xbdc <Endpoint_Write_Control_PStream_LE+0x4e>
     c46:	0a c0       	rjmp	.+20     	; 0xc5c <Endpoint_Write_Control_PStream_LE+0xce>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     c48:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     c4c:	88 23       	and	r24, r24
     c4e:	99 f0       	breq	.+38     	; 0xc76 <Endpoint_Write_Control_PStream_LE+0xe8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     c50:	85 30       	cpi	r24, 0x05	; 5
     c52:	99 f0       	breq	.+38     	; 0xc7a <Endpoint_Write_Control_PStream_LE+0xec>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c54:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     c56:	83 ff       	sbrs	r24, 3
     c58:	03 c0       	rjmp	.+6      	; 0xc60 <Endpoint_Write_Control_PStream_LE+0xd2>
     c5a:	11 c0       	rjmp	.+34     	; 0xc7e <Endpoint_Write_Control_PStream_LE+0xf0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c5c:	e8 ee       	ldi	r30, 0xE8	; 232
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     c62:	82 ff       	sbrs	r24, 2
     c64:	f1 cf       	rjmp	.-30     	; 0xc48 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	0b c0       	rjmp	.+22     	; 0xc80 <Endpoint_Write_Control_PStream_LE+0xf2>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	09 c0       	rjmp	.+18     	; 0xc80 <Endpoint_Write_Control_PStream_LE+0xf2>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     c6e:	83 e0       	ldi	r24, 0x03	; 3
     c70:	07 c0       	rjmp	.+14     	; 0xc80 <Endpoint_Write_Control_PStream_LE+0xf2>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	05 c0       	rjmp	.+10     	; 0xc80 <Endpoint_Write_Control_PStream_LE+0xf2>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     c76:	82 e0       	ldi	r24, 0x02	; 2
     c78:	03 c0       	rjmp	.+6      	; 0xc80 <Endpoint_Write_Control_PStream_LE+0xf2>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     c7a:	83 e0       	ldi	r24, 0x03	; 3
     c7c:	01 c0       	rjmp	.+2      	; 0xc80 <Endpoint_Write_Control_PStream_LE+0xf2>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     c7e:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     c80:	df 91       	pop	r29
     c82:	cf 91       	pop	r28
     c84:	1f 91       	pop	r17
     c86:	0f 91       	pop	r16
     c88:	ff 90       	pop	r15
     c8a:	ef 90       	pop	r14
     c8c:	08 95       	ret

00000c8e <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     c8e:	8f 92       	push	r8
     c90:	9f 92       	push	r9
     c92:	bf 92       	push	r11
     c94:	cf 92       	push	r12
     c96:	df 92       	push	r13
     c98:	ef 92       	push	r14
     c9a:	ff 92       	push	r15
     c9c:	0f 93       	push	r16
     c9e:	1f 93       	push	r17
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	87 30       	cpi	r24, 0x07	; 7
     ca6:	70 f1       	brcs	.+92     	; 0xd04 <Endpoint_ConfigureEndpoint_Prv+0x76>
     ca8:	26 c0       	rjmp	.+76     	; 0xcf6 <Endpoint_ConfigureEndpoint_Prv+0x68>
     caa:	29 2f       	mov	r18, r25
     cac:	2f 70       	andi	r18, 0x0F	; 15
     cae:	e7 01       	movw	r28, r14
     cb0:	28 83       	st	Y, r18
     cb2:	89 17       	cp	r24, r25
     cb4:	31 f0       	breq	.+12     	; 0xcc2 <Endpoint_ConfigureEndpoint_Prv+0x34>
     cb6:	e8 01       	movw	r28, r16
     cb8:	78 81       	ld	r23, Y
     cba:	20 81       	ld	r18, Z
     cbc:	e4 01       	movw	r28, r8
     cbe:	58 81       	ld	r21, Y
     cc0:	03 c0       	rjmp	.+6      	; 0xcc8 <Endpoint_ConfigureEndpoint_Prv+0x3a>
     cc2:	24 2f       	mov	r18, r20
     cc4:	76 2f       	mov	r23, r22
     cc6:	5b 2d       	mov	r21, r11
     cc8:	21 ff       	sbrs	r18, 1
     cca:	12 c0       	rjmp	.+36     	; 0xcf0 <Endpoint_ConfigureEndpoint_Prv+0x62>
     ccc:	3c 91       	ld	r19, X
     cce:	3e 7f       	andi	r19, 0xFE	; 254
     cd0:	3c 93       	st	X, r19
     cd2:	30 81       	ld	r19, Z
     cd4:	3d 7f       	andi	r19, 0xFD	; 253
     cd6:	30 83       	st	Z, r19
     cd8:	3c 91       	ld	r19, X
     cda:	31 60       	ori	r19, 0x01	; 1
     cdc:	3c 93       	st	X, r19
     cde:	e8 01       	movw	r28, r16
     ce0:	78 83       	st	Y, r23
     ce2:	20 83       	st	Z, r18
     ce4:	e4 01       	movw	r28, r8
     ce6:	58 83       	st	Y, r21
     ce8:	e6 01       	movw	r28, r12
     cea:	28 81       	ld	r18, Y
     cec:	22 23       	and	r18, r18
     cee:	44 f4       	brge	.+16     	; 0xd00 <Endpoint_ConfigureEndpoint_Prv+0x72>
     cf0:	9f 5f       	subi	r25, 0xFF	; 255
     cf2:	97 30       	cpi	r25, 0x07	; 7
     cf4:	d1 f6       	brne	.-76     	; 0xcaa <Endpoint_ConfigureEndpoint_Prv+0x1c>
     cf6:	8f 70       	andi	r24, 0x0F	; 15
     cf8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	21 c0       	rjmp	.+66     	; 0xd42 <Endpoint_ConfigureEndpoint_Prv+0xb4>
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	1f c0       	rjmp	.+62     	; 0xd42 <Endpoint_ConfigureEndpoint_Prv+0xb4>
     d04:	98 2f       	mov	r25, r24
     d06:	9f 70       	andi	r25, 0x0F	; 15
     d08:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     d0c:	98 2f       	mov	r25, r24
     d0e:	24 2f       	mov	r18, r20
     d10:	76 2f       	mov	r23, r22
     d12:	50 e0       	ldi	r21, 0x00	; 0
     d14:	ab ee       	ldi	r26, 0xEB	; 235
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	ed ee       	ldi	r30, 0xED	; 237
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	0c ee       	ldi	r16, 0xEC	; 236
     d1e:	10 e0       	ldi	r17, 0x00	; 0
     d20:	0f 2e       	mov	r0, r31
     d22:	f0 ef       	ldi	r31, 0xF0	; 240
     d24:	8f 2e       	mov	r8, r31
     d26:	91 2c       	mov	r9, r1
     d28:	f0 2d       	mov	r31, r0
     d2a:	0f 2e       	mov	r0, r31
     d2c:	fe ee       	ldi	r31, 0xEE	; 238
     d2e:	cf 2e       	mov	r12, r31
     d30:	d1 2c       	mov	r13, r1
     d32:	f0 2d       	mov	r31, r0
     d34:	0f 2e       	mov	r0, r31
     d36:	f9 ee       	ldi	r31, 0xE9	; 233
     d38:	ef 2e       	mov	r14, r31
     d3a:	f1 2c       	mov	r15, r1
     d3c:	f0 2d       	mov	r31, r0
     d3e:	b1 2c       	mov	r11, r1
     d40:	c3 cf       	rjmp	.-122    	; 0xcc8 <Endpoint_ConfigureEndpoint_Prv+0x3a>
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	ff 90       	pop	r15
     d4c:	ef 90       	pop	r14
     d4e:	df 90       	pop	r13
     d50:	cf 90       	pop	r12
     d52:	bf 90       	pop	r11
     d54:	9f 90       	pop	r9
     d56:	8f 90       	pop	r8
     d58:	08 95       	ret

00000d5a <Endpoint_ConfigureEndpointTable>:
     d5a:	ef 92       	push	r14
     d5c:	ff 92       	push	r15
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	66 23       	and	r22, r22
     d68:	e9 f1       	breq	.+122    	; 0xde4 <Endpoint_ConfigureEndpointTable+0x8a>
     d6a:	06 2f       	mov	r16, r22
     d6c:	c8 2f       	mov	r28, r24
     d6e:	d9 2f       	mov	r29, r25
     d70:	10 e0       	ldi	r17, 0x00	; 0
     d72:	0f 2e       	mov	r0, r31
     d74:	f6 e0       	ldi	r31, 0x06	; 6
     d76:	ff 2e       	mov	r15, r31
     d78:	f0 2d       	mov	r31, r0
     d7a:	68 94       	set
     d7c:	ee 24       	eor	r14, r14
     d7e:	e1 f8       	bld	r14, 1
     d80:	58 81       	ld	r21, Y
     d82:	55 23       	and	r21, r21
     d84:	49 f1       	breq	.+82     	; 0xdd8 <Endpoint_ConfigureEndpointTable+0x7e>
     d86:	9c 81       	ldd	r25, Y+4	; 0x04
     d88:	e9 81       	ldd	r30, Y+1	; 0x01
     d8a:	fa 81       	ldd	r31, Y+2	; 0x02
     d8c:	6b 81       	ldd	r22, Y+3	; 0x03
     d8e:	85 2f       	mov	r24, r21
     d90:	8f 70       	andi	r24, 0x0F	; 15
     d92:	87 30       	cpi	r24, 0x07	; 7
     d94:	48 f5       	brcc	.+82     	; 0xde8 <Endpoint_ConfigureEndpointTable+0x8e>
     d96:	92 30       	cpi	r25, 0x02	; 2
     d98:	10 f4       	brcc	.+4      	; 0xd9e <Endpoint_ConfigureEndpointTable+0x44>
     d9a:	4e 2d       	mov	r20, r14
     d9c:	01 c0       	rjmp	.+2      	; 0xda0 <Endpoint_ConfigureEndpointTable+0x46>
     d9e:	4f 2d       	mov	r20, r15
     da0:	e9 30       	cpi	r30, 0x09	; 9
     da2:	f1 05       	cpc	r31, r1
     da4:	50 f0       	brcs	.+20     	; 0xdba <Endpoint_ConfigureEndpointTable+0x60>
     da6:	28 e0       	ldi	r18, 0x08	; 8
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	9f 5f       	subi	r25, 0xFF	; 255
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	2e 17       	cp	r18, r30
     db4:	3f 07       	cpc	r19, r31
     db6:	d0 f3       	brcs	.-12     	; 0xdac <Endpoint_ConfigureEndpointTable+0x52>
     db8:	01 c0       	rjmp	.+2      	; 0xdbc <Endpoint_ConfigureEndpointTable+0x62>
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	92 95       	swap	r25
     dbe:	90 7f       	andi	r25, 0xF0	; 240
     dc0:	49 2b       	or	r20, r25
     dc2:	90 e4       	ldi	r25, 0x40	; 64
     dc4:	69 9f       	mul	r22, r25
     dc6:	b0 01       	movw	r22, r0
     dc8:	11 24       	eor	r1, r1
     dca:	55 1f       	adc	r21, r21
     dcc:	55 27       	eor	r21, r21
     dce:	55 1f       	adc	r21, r21
     dd0:	65 2b       	or	r22, r21
     dd2:	5d df       	rcall	.-326    	; 0xc8e <Endpoint_ConfigureEndpoint_Prv>
     dd4:	88 23       	and	r24, r24
     dd6:	49 f0       	breq	.+18     	; 0xdea <Endpoint_ConfigureEndpointTable+0x90>
     dd8:	1f 5f       	subi	r17, 0xFF	; 255
     dda:	25 96       	adiw	r28, 0x05	; 5
     ddc:	01 13       	cpse	r16, r17
     dde:	d0 cf       	rjmp	.-96     	; 0xd80 <Endpoint_ConfigureEndpointTable+0x26>
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	03 c0       	rjmp	.+6      	; 0xdea <Endpoint_ConfigureEndpointTable+0x90>
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	01 c0       	rjmp	.+2      	; 0xdea <Endpoint_ConfigureEndpointTable+0x90>
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	1f 91       	pop	r17
     df0:	0f 91       	pop	r16
     df2:	ff 90       	pop	r15
     df4:	ef 90       	pop	r14
     df6:	08 95       	ret

00000df8 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     df8:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <USB_ControlRequest>
     dfc:	88 23       	and	r24, r24
     dfe:	44 f0       	brlt	.+16     	; 0xe10 <Endpoint_ClearStatusStage+0x18>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e00:	e8 ee       	ldi	r30, 0xE8	; 232
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	14 c0       	rjmp	.+40     	; 0xe2e <Endpoint_ClearStatusStage+0x36>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     e06:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <USB_DeviceState>
     e0a:	81 11       	cpse	r24, r1
     e0c:	03 c0       	rjmp	.+6      	; 0xe14 <Endpoint_ClearStatusStage+0x1c>
     e0e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e10:	e8 ee       	ldi	r30, 0xE8	; 232
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     e16:	82 ff       	sbrs	r24, 2
     e18:	f6 cf       	rjmp	.-20     	; 0xe06 <Endpoint_ClearStatusStage+0xe>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e1a:	e8 ee       	ldi	r30, 0xE8	; 232
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	8b 77       	andi	r24, 0x7B	; 123
     e22:	80 83       	st	Z, r24
     e24:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     e26:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <USB_DeviceState>
     e2a:	88 23       	and	r24, r24
     e2c:	41 f0       	breq	.+16     	; 0xe3e <Endpoint_ClearStatusStage+0x46>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     e2e:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     e30:	80 ff       	sbrs	r24, 0
     e32:	f9 cf       	rjmp	.-14     	; 0xe26 <Endpoint_ClearStatusStage+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e34:	e8 ee       	ldi	r30, 0xE8	; 232
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	8e 77       	andi	r24, 0x7E	; 126
     e3c:	80 83       	st	Z, r24
     e3e:	08 95       	ret

00000e40 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
     e40:	0f 93       	push	r16
     e42:	1f 93       	push	r17
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     e48:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     e4c:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
     e50:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e52:	ac ee       	ldi	r26, 0xEC	; 236
     e54:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e56:	e8 ee       	ldi	r30, 0xE8	; 232
     e58:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     e5a:	0b ee       	ldi	r16, 0xEB	; 235
     e5c:	10 e0       	ldi	r17, 0x00	; 0
     e5e:	44 ee       	ldi	r20, 0xE4	; 228
     e60:	50 e0       	ldi	r21, 0x00	; 0
     e62:	01 c0       	rjmp	.+2      	; 0xe66 <Endpoint_WaitUntilReady+0x26>
     e64:	9c 01       	movw	r18, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e66:	9c 91       	ld	r25, X
     e68:	89 2f       	mov	r24, r25
     e6a:	81 70       	andi	r24, 0x01	; 1
     e6c:	90 fd       	sbrc	r25, 0
     e6e:	1d c0       	rjmp	.+58     	; 0xeaa <Endpoint_WaitUntilReady+0x6a>
     e70:	20 c0       	rjmp	.+64     	; 0xeb2 <Endpoint_WaitUntilReady+0x72>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     e72:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     e76:	88 23       	and	r24, r24
     e78:	81 f0       	breq	.+32     	; 0xe9a <Endpoint_WaitUntilReady+0x5a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     e7a:	85 30       	cpi	r24, 0x05	; 5
     e7c:	81 f0       	breq	.+32     	; 0xe9e <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     e7e:	e8 01       	movw	r28, r16
     e80:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     e82:	85 fd       	sbrc	r24, 5
     e84:	0e c0       	rjmp	.+28     	; 0xea2 <Endpoint_WaitUntilReady+0x62>
     e86:	ea 01       	movw	r28, r20
     e88:	88 81       	ld	r24, Y
     e8a:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     e8c:	28 17       	cp	r18, r24
     e8e:	39 07       	cpc	r19, r25
     e90:	51 f3       	breq	.-44     	; 0xe66 <Endpoint_WaitUntilReady+0x26>
     e92:	61 50       	subi	r22, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     e94:	39 f7       	brne	.-50     	; 0xe64 <Endpoint_WaitUntilReady+0x24>
			  return ENDPOINT_READYWAIT_Timeout;
     e96:	84 e0       	ldi	r24, 0x04	; 4
     e98:	0f c0       	rjmp	.+30     	; 0xeb8 <Endpoint_WaitUntilReady+0x78>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     e9a:	82 e0       	ldi	r24, 0x02	; 2
     e9c:	0d c0       	rjmp	.+26     	; 0xeb8 <Endpoint_WaitUntilReady+0x78>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     e9e:	83 e0       	ldi	r24, 0x03	; 3
     ea0:	0b c0       	rjmp	.+22     	; 0xeb8 <Endpoint_WaitUntilReady+0x78>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	09 c0       	rjmp	.+18     	; 0xeb8 <Endpoint_WaitUntilReady+0x78>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	07 c0       	rjmp	.+14     	; 0xeb8 <Endpoint_WaitUntilReady+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     eaa:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     eac:	80 ff       	sbrs	r24, 0
     eae:	e1 cf       	rjmp	.-62     	; 0xe72 <Endpoint_WaitUntilReady+0x32>
     eb0:	fa cf       	rjmp	.-12     	; 0xea6 <Endpoint_WaitUntilReady+0x66>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     eb2:	90 81       	ld	r25, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     eb4:	92 ff       	sbrs	r25, 2
     eb6:	dd cf       	rjmp	.-70     	; 0xe72 <Endpoint_WaitUntilReady+0x32>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	1f 91       	pop	r17
     ebe:	0f 91       	pop	r16
     ec0:	08 95       	ret

00000ec2 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     ec2:	1f 92       	push	r1
     ec4:	0f 92       	push	r0
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	0f 92       	push	r0
     eca:	11 24       	eor	r1, r1
     ecc:	0b b6       	in	r0, 0x3b	; 59
     ece:	0f 92       	push	r0
     ed0:	2f 93       	push	r18
     ed2:	3f 93       	push	r19
     ed4:	4f 93       	push	r20
     ed6:	5f 93       	push	r21
     ed8:	6f 93       	push	r22
     eda:	7f 93       	push	r23
     edc:	8f 93       	push	r24
     ede:	9f 93       	push	r25
     ee0:	af 93       	push	r26
     ee2:	bf 93       	push	r27
     ee4:	ef 93       	push	r30
     ee6:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     ee8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     eec:	82 ff       	sbrs	r24, 2
     eee:	0a c0       	rjmp	.+20     	; 0xf04 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     ef0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     ef4:	82 ff       	sbrs	r24, 2
     ef6:	06 c0       	rjmp	.+12     	; 0xf04 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     ef8:	e1 ee       	ldi	r30, 0xE1	; 225
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	8b 7f       	andi	r24, 0xFB	; 251
     f00:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     f02:	c6 d9       	rcall	.-3188   	; 0x290 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     f04:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     f08:	80 ff       	sbrs	r24, 0
     f0a:	1d c0       	rjmp	.+58     	; 0xf46 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     f0c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     f10:	80 ff       	sbrs	r24, 0
     f12:	19 c0       	rjmp	.+50     	; 0xf46 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     f14:	ea ed       	ldi	r30, 0xDA	; 218
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	8e 7f       	andi	r24, 0xFE	; 254
     f1c:	80 83       	st	Z, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     f1e:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     f22:	80 ff       	sbrs	r24, 0
     f24:	0c c0       	rjmp	.+24     	; 0xf3e <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     f26:	84 e1       	ldi	r24, 0x14	; 20
     f28:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     f2a:	86 e1       	ldi	r24, 0x16	; 22
     f2c:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     f2e:	09 b4       	in	r0, 0x29	; 41
     f30:	00 fe       	sbrs	r0, 0
     f32:	fd cf       	rjmp	.-6      	; 0xf2e <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <USB_DeviceState>
			EVENT_USB_Device_Connect();
     f3a:	9b d9       	rcall	.-3274   	; 0x272 <EVENT_USB_Device_Connect>
     f3c:	04 c0       	rjmp	.+8      	; 0xf46 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     f3e:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     f40:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
     f44:	97 d9       	rcall	.-3282   	; 0x274 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     f46:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     f4a:	80 ff       	sbrs	r24, 0
     f4c:	16 c0       	rjmp	.+44     	; 0xf7a <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     f4e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     f52:	80 ff       	sbrs	r24, 0
     f54:	12 c0       	rjmp	.+36     	; 0xf7a <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     f56:	e2 ee       	ldi	r30, 0xE2	; 226
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	8e 7f       	andi	r24, 0xFE	; 254
     f5e:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     f60:	80 81       	ld	r24, Z
     f62:	80 61       	ori	r24, 0x10	; 16
     f64:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     f66:	e8 ed       	ldi	r30, 0xD8	; 216
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	80 62       	ori	r24, 0x20	; 32
     f6e:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     f70:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     f72:	85 e0       	ldi	r24, 0x05	; 5
     f74:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
     f78:	e2 d1       	rcall	.+964    	; 0x133e <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     f7a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     f7e:	84 ff       	sbrs	r24, 4
     f80:	2f c0       	rjmp	.+94     	; 0xfe0 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     f82:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     f86:	84 ff       	sbrs	r24, 4
     f88:	2b c0       	rjmp	.+86     	; 0xfe0 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     f8a:	84 e1       	ldi	r24, 0x14	; 20
     f8c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     f8e:	86 e1       	ldi	r24, 0x16	; 22
     f90:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     f92:	09 b4       	in	r0, 0x29	; 41
     f94:	00 fe       	sbrs	r0, 0
     f96:	fd cf       	rjmp	.-6      	; 0xf92 <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     f98:	e8 ed       	ldi	r30, 0xD8	; 216
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	8f 7d       	andi	r24, 0xDF	; 223
     fa0:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     fa2:	e1 ee       	ldi	r30, 0xE1	; 225
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	8f 7e       	andi	r24, 0xEF	; 239
     faa:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     fac:	e2 ee       	ldi	r30, 0xE2	; 226
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	8f 7e       	andi	r24, 0xEF	; 239
     fb4:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     fb6:	80 81       	ld	r24, Z
     fb8:	81 60       	ori	r24, 0x01	; 1
     fba:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     fbc:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <USB_Device_ConfigurationNumber>
     fc0:	88 23       	and	r24, r24
     fc2:	21 f0       	breq	.+8      	; 0xfcc <__vector_10+0x10a>
		  USB_DeviceState = DEVICE_STATE_Configured;
     fc4:	84 e0       	ldi	r24, 0x04	; 4
     fc6:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <USB_DeviceState>
     fca:	09 c0       	rjmp	.+18     	; 0xfde <__vector_10+0x11c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     fcc:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     fd0:	88 23       	and	r24, r24
     fd2:	14 f0       	brlt	.+4      	; 0xfd8 <__vector_10+0x116>
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	01 c0       	rjmp	.+2      	; 0xfda <__vector_10+0x118>
     fd8:	83 e0       	ldi	r24, 0x03	; 3
     fda:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     fde:	af d1       	rcall	.+862    	; 0x133e <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     fe0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     fe4:	83 ff       	sbrs	r24, 3
     fe6:	1e c0       	rjmp	.+60     	; 0x1024 <__EEPROM_REGION_LENGTH__+0x24>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     fe8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     fec:	83 ff       	sbrs	r24, 3
     fee:	1a c0       	rjmp	.+52     	; 0x1024 <__EEPROM_REGION_LENGTH__+0x24>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     ff0:	e1 ee       	ldi	r30, 0xE1	; 225
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	87 7f       	andi	r24, 0xF7	; 247
     ff8:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     ffa:	82 e0       	ldi	r24, 0x02	; 2
     ffc:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    1000:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1004:	80 81       	ld	r24, Z
    1006:	8e 7f       	andi	r24, 0xFE	; 254
    1008:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    100a:	e2 ee       	ldi	r30, 0xE2	; 226
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	8e 7f       	andi	r24, 0xFE	; 254
    1012:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1014:	80 81       	ld	r24, Z
    1016:	80 61       	ori	r24, 0x10	; 16
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1018:	80 83       	st	Z, r24
    101a:	42 e0       	ldi	r20, 0x02	; 2
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	36 de       	rcall	.-916    	; 0xc8e <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1022:	8d d1       	rcall	.+794    	; 0x133e <USB_Event_Stub>
    1024:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1026:	ef 91       	pop	r30
    1028:	bf 91       	pop	r27
    102a:	af 91       	pop	r26
    102c:	9f 91       	pop	r25
    102e:	8f 91       	pop	r24
    1030:	7f 91       	pop	r23
    1032:	6f 91       	pop	r22
    1034:	5f 91       	pop	r21
    1036:	4f 91       	pop	r20
    1038:	3f 91       	pop	r19
    103a:	2f 91       	pop	r18
    103c:	0f 90       	pop	r0
    103e:	0b be       	out	0x3b, r0	; 59
    1040:	0f 90       	pop	r0
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	0f 90       	pop	r0
    1046:	1f 90       	pop	r1
    1048:	18 95       	reti

0000104a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	aa 97       	sbiw	r28, 0x2a	; 42
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	f8 94       	cli
    105c:	de bf       	out	0x3e, r29	; 62
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	cd bf       	out	0x3d, r28	; 61
    1062:	e6 e5       	ldi	r30, 0x56	; 86
    1064:	f1 e0       	ldi	r31, 0x01	; 1
    1066:	2e e5       	ldi	r18, 0x5E	; 94
    1068:	31 e0       	ldi	r19, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    106a:	a1 ef       	ldi	r26, 0xF1	; 241
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	8c 91       	ld	r24, X
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1070:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1072:	2e 17       	cp	r18, r30
    1074:	3f 07       	cpc	r19, r31
    1076:	d9 f7       	brne	.-10     	; 0x106e <USB_Device_ProcessControlRequest+0x24>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1078:	07 d9       	rcall	.-3570   	; 0x288 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    107a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    107e:	83 ff       	sbrs	r24, 3
    1080:	39 c1       	rjmp	.+626    	; 0x12f4 <USB_Device_ProcessControlRequest+0x2aa>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1082:	e6 e5       	ldi	r30, 0x56	; 86
    1084:	f1 e0       	ldi	r31, 0x01	; 1
    1086:	90 81       	ld	r25, Z

		switch (USB_ControlRequest.bRequest)
    1088:	81 81       	ldd	r24, Z+1	; 0x01
    108a:	85 30       	cpi	r24, 0x05	; 5
    108c:	09 f4       	brne	.+2      	; 0x1090 <USB_Device_ProcessControlRequest+0x46>
    108e:	7f c0       	rjmp	.+254    	; 0x118e <USB_Device_ProcessControlRequest+0x144>
    1090:	30 f4       	brcc	.+12     	; 0x109e <USB_Device_ProcessControlRequest+0x54>
    1092:	81 30       	cpi	r24, 0x01	; 1
    1094:	c9 f1       	breq	.+114    	; 0x1108 <USB_Device_ProcessControlRequest+0xbe>
    1096:	68 f0       	brcs	.+26     	; 0x10b2 <USB_Device_ProcessControlRequest+0x68>
    1098:	83 30       	cpi	r24, 0x03	; 3
    109a:	b1 f1       	breq	.+108    	; 0x1108 <USB_Device_ProcessControlRequest+0xbe>
    109c:	2b c1       	rjmp	.+598    	; 0x12f4 <USB_Device_ProcessControlRequest+0x2aa>
    109e:	88 30       	cpi	r24, 0x08	; 8
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <USB_Device_ProcessControlRequest+0x5a>
    10a2:	f2 c0       	rjmp	.+484    	; 0x1288 <USB_Device_ProcessControlRequest+0x23e>
    10a4:	89 30       	cpi	r24, 0x09	; 9
    10a6:	09 f4       	brne	.+2      	; 0x10aa <USB_Device_ProcessControlRequest+0x60>
    10a8:	ff c0       	rjmp	.+510    	; 0x12a8 <USB_Device_ProcessControlRequest+0x25e>
    10aa:	86 30       	cpi	r24, 0x06	; 6
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <USB_Device_ProcessControlRequest+0x66>
    10ae:	22 c1       	rjmp	.+580    	; 0x12f4 <USB_Device_ProcessControlRequest+0x2aa>
    10b0:	91 c0       	rjmp	.+290    	; 0x11d4 <USB_Device_ProcessControlRequest+0x18a>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    10b2:	90 38       	cpi	r25, 0x80	; 128
    10b4:	21 f0       	breq	.+8      	; 0x10be <USB_Device_ProcessControlRequest+0x74>
    10b6:	92 38       	cpi	r25, 0x82	; 130
    10b8:	09 f0       	breq	.+2      	; 0x10bc <USB_Device_ProcessControlRequest+0x72>
    10ba:	1c c1       	rjmp	.+568    	; 0x12f4 <USB_Device_ProcessControlRequest+0x2aa>
    10bc:	08 c0       	rjmp	.+16     	; 0x10ce <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    10be:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    10c2:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <USB_Device_RemoteWakeupEnabled>
    10c6:	99 23       	and	r25, r25
    10c8:	89 f0       	breq	.+34     	; 0x10ec <USB_Device_ProcessControlRequest+0xa2>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    10ca:	82 60       	ori	r24, 0x02	; 2
    10cc:	0f c0       	rjmp	.+30     	; 0x10ec <USB_Device_ProcessControlRequest+0xa2>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    10ce:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <USB_ControlRequest+0x4>
    10d2:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    10d4:	87 30       	cpi	r24, 0x07	; 7
    10d6:	08 f0       	brcs	.+2      	; 0x10da <USB_Device_ProcessControlRequest+0x90>
    10d8:	0d c1       	rjmp	.+538    	; 0x12f4 <USB_Device_ProcessControlRequest+0x2aa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10da:	e9 ee       	ldi	r30, 0xE9	; 233
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    10e0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
    10e4:	85 fb       	bst	r24, 5
    10e6:	88 27       	eor	r24, r24
    10e8:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10ea:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10ec:	e8 ee       	ldi	r30, 0xE8	; 232
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	90 81       	ld	r25, Z
    10f2:	97 7f       	andi	r25, 0xF7	; 247
    10f4:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    10f6:	a1 ef       	ldi	r26, 0xF1	; 241
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	8c 93       	st	X, r24
				UEDATX = (Data >> 8);
    10fc:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10fe:	80 81       	ld	r24, Z
    1100:	8e 77       	andi	r24, 0x7E	; 126
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1102:	80 83       	st	Z, r24
    1104:	79 de       	rcall	.-782    	; 0xdf8 <Endpoint_ClearStatusStage>
    1106:	f6 c0       	rjmp	.+492    	; 0x12f4 <USB_Device_ProcessControlRequest+0x2aa>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1108:	99 23       	and	r25, r25
    110a:	09 f4       	brne	.+2      	; 0x110e <USB_Device_ProcessControlRequest+0xc4>
    110c:	02 c1       	rjmp	.+516    	; 0x1312 <USB_Device_ProcessControlRequest+0x2c8>
    110e:	92 30       	cpi	r25, 0x02	; 2
    1110:	09 f0       	breq	.+2      	; 0x1114 <USB_Device_ProcessControlRequest+0xca>
    1112:	f0 c0       	rjmp	.+480    	; 0x12f4 <USB_Device_ProcessControlRequest+0x2aa>
    1114:	03 c1       	rjmp	.+518    	; 0x131c <USB_Device_ProcessControlRequest+0x2d2>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1116:	91 e0       	ldi	r25, 0x01	; 1
    1118:	83 30       	cpi	r24, 0x03	; 3
    111a:	09 f0       	breq	.+2      	; 0x111e <USB_Device_ProcessControlRequest+0xd4>
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <USB_Device_RemoteWakeupEnabled>
    1122:	2c c0       	rjmp	.+88     	; 0x117c <USB_Device_ProcessControlRequest+0x132>
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1124:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <USB_ControlRequest+0x4>
    1128:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    112a:	9f ef       	ldi	r25, 0xFF	; 255
    112c:	98 0f       	add	r25, r24
    112e:	96 30       	cpi	r25, 0x06	; 6
    1130:	08 f0       	brcs	.+2      	; 0x1134 <USB_Device_ProcessControlRequest+0xea>
    1132:	e0 c0       	rjmp	.+448    	; 0x12f4 <USB_Device_ProcessControlRequest+0x2aa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1134:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1138:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    113c:	90 ff       	sbrs	r25, 0
    113e:	1e c0       	rjmp	.+60     	; 0x117c <USB_Device_ProcessControlRequest+0x132>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1140:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <USB_ControlRequest+0x1>
    1144:	93 30       	cpi	r25, 0x03	; 3
    1146:	31 f4       	brne	.+12     	; 0x1154 <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1148:	eb ee       	ldi	r30, 0xEB	; 235
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	80 62       	ori	r24, 0x20	; 32
    1150:	80 83       	st	Z, r24
    1152:	14 c0       	rjmp	.+40     	; 0x117c <USB_Device_ProcessControlRequest+0x132>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1154:	eb ee       	ldi	r30, 0xEB	; 235
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	90 81       	ld	r25, Z
    115a:	90 61       	ori	r25, 0x10	; 16
    115c:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    115e:	21 e0       	ldi	r18, 0x01	; 1
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	a9 01       	movw	r20, r18
    1164:	02 c0       	rjmp	.+4      	; 0x116a <USB_Device_ProcessControlRequest+0x120>
    1166:	44 0f       	add	r20, r20
    1168:	55 1f       	adc	r21, r21
    116a:	8a 95       	dec	r24
    116c:	e2 f7       	brpl	.-8      	; 0x1166 <USB_Device_ProcessControlRequest+0x11c>
    116e:	aa ee       	ldi	r26, 0xEA	; 234
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	4c 93       	st	X, r20
				UERST = 0;
    1174:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1176:	80 81       	ld	r24, Z
    1178:	88 60       	ori	r24, 0x08	; 8
    117a:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    117c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1180:	e8 ee       	ldi	r30, 0xE8	; 232
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	87 7f       	andi	r24, 0xF7	; 247

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1188:	80 83       	st	Z, r24
    118a:	36 de       	rcall	.-916    	; 0xdf8 <Endpoint_ClearStatusStage>
    118c:	b3 c0       	rjmp	.+358    	; 0x12f4 <USB_Device_ProcessControlRequest+0x2aa>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    118e:	91 11       	cpse	r25, r1
    1190:	b1 c0       	rjmp	.+354    	; 0x12f4 <USB_Device_ProcessControlRequest+0x2aa>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1192:	10 91 58 01 	lds	r17, 0x0158	; 0x800158 <USB_ControlRequest+0x2>
    1196:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1198:	e3 ee       	ldi	r30, 0xE3	; 227
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	80 78       	andi	r24, 0x80	; 128
    11a0:	81 2b       	or	r24, r17
    11a2:	80 83       	st	Z, r24
    11a4:	e8 ee       	ldi	r30, 0xE8	; 232
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	87 7f       	andi	r24, 0xF7	; 247

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    11ac:	80 83       	st	Z, r24
    11ae:	24 de       	rcall	.-952    	; 0xdf8 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    11b0:	e8 ee       	ldi	r30, 0xE8	; 232
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
    11b6:	80 ff       	sbrs	r24, 0
    11b8:	fd cf       	rjmp	.-6      	; 0x11b4 <USB_Device_ProcessControlRequest+0x16a>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    11ba:	e3 ee       	ldi	r30, 0xE3	; 227
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	80 68       	ori	r24, 0x80	; 128
    11c2:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    11c4:	11 11       	cpse	r17, r1
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <USB_Device_ProcessControlRequest+0x182>
    11c8:	82 e0       	ldi	r24, 0x02	; 2
    11ca:	01 c0       	rjmp	.+2      	; 0x11ce <USB_Device_ProcessControlRequest+0x184>
    11cc:	83 e0       	ldi	r24, 0x03	; 3
    11ce:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <USB_DeviceState>
    11d2:	90 c0       	rjmp	.+288    	; 0x12f4 <USB_Device_ProcessControlRequest+0x2aa>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    11d4:	90 58       	subi	r25, 0x80	; 128
    11d6:	92 30       	cpi	r25, 0x02	; 2
    11d8:	08 f0       	brcs	.+2      	; 0x11dc <USB_Device_ProcessControlRequest+0x192>
    11da:	8c c0       	rjmp	.+280    	; 0x12f4 <USB_Device_ProcessControlRequest+0x2aa>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    11dc:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <USB_ControlRequest+0x2>
    11e0:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <USB_ControlRequest+0x3>
    11e4:	8c 3d       	cpi	r24, 0xDC	; 220
    11e6:	53 e0       	ldi	r21, 0x03	; 3
    11e8:	95 07       	cpc	r25, r21
    11ea:	99 f5       	brne	.+102    	; 0x1252 <USB_Device_ProcessControlRequest+0x208>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    11ec:	83 e0       	ldi	r24, 0x03	; 3
    11ee:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    11f0:	8a e2       	ldi	r24, 0x2A	; 42
    11f2:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    11f4:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    11f6:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    11f8:	de 01       	movw	r26, r28
    11fa:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    11fc:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    11fe:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1200:	41 e2       	ldi	r20, 0x21	; 33
    1202:	e3 2f       	mov	r30, r19
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    120a:	84 91       	lpm	r24, Z

					if (SerialCharNum & 0x01)
    120c:	20 ff       	sbrs	r18, 0
    120e:	03 c0       	rjmp	.+6      	; 0x1216 <USB_Device_ProcessControlRequest+0x1cc>
					{
						SerialByte >>= 4;
    1210:	82 95       	swap	r24
    1212:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    1214:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1216:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1218:	8a 30       	cpi	r24, 0x0A	; 10
    121a:	18 f0       	brcs	.+6      	; 0x1222 <USB_Device_ProcessControlRequest+0x1d8>
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	c7 96       	adiw	r24, 0x37	; 55
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <USB_Device_ProcessControlRequest+0x1dc>
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	c0 96       	adiw	r24, 0x30	; 48
    1226:	8d 93       	st	X+, r24
    1228:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    122a:	2f 5f       	subi	r18, 0xFF	; 255
    122c:	24 31       	cpi	r18, 0x14	; 20
    122e:	49 f7       	brne	.-46     	; 0x1202 <USB_Device_ProcessControlRequest+0x1b8>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1230:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1232:	08 ee       	ldi	r16, 0xE8	; 232
    1234:	10 e0       	ldi	r17, 0x00	; 0
    1236:	f8 01       	movw	r30, r16
    1238:	80 81       	ld	r24, Z
    123a:	87 7f       	andi	r24, 0xF7	; 247
    123c:	80 83       	st	Z, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    123e:	6a e2       	ldi	r22, 0x2A	; 42
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	ce 01       	movw	r24, r28
    1244:	01 96       	adiw	r24, 0x01	; 1
    1246:	bb db       	rcall	.-2186   	; 0x9be <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1248:	f8 01       	movw	r30, r16
    124a:	80 81       	ld	r24, Z
    124c:	8b 77       	andi	r24, 0x7B	; 123
    124e:	80 83       	st	Z, r24
    1250:	51 c0       	rjmp	.+162    	; 0x12f4 <USB_Device_ProcessControlRequest+0x2aa>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1252:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <USB_ControlRequest+0x4>
    1256:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <USB_ControlRequest+0x5>
    125a:	ae 01       	movw	r20, r28
    125c:	4f 5f       	subi	r20, 0xFF	; 255
    125e:	5f 4f       	sbci	r21, 0xFF	; 255
    1260:	0e 94 c8 00 	call	0x190	; 0x190 <CALLBACK_USB_GetDescriptor>
    1264:	bc 01       	movw	r22, r24
    1266:	89 2b       	or	r24, r25
    1268:	09 f4       	brne	.+2      	; 0x126c <USB_Device_ProcessControlRequest+0x222>
    126a:	44 c0       	rjmp	.+136    	; 0x12f4 <USB_Device_ProcessControlRequest+0x2aa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    126c:	08 ee       	ldi	r16, 0xE8	; 232
    126e:	10 e0       	ldi	r17, 0x00	; 0
    1270:	f8 01       	movw	r30, r16
    1272:	90 81       	ld	r25, Z
    1274:	97 7f       	andi	r25, 0xF7	; 247
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1276:	90 83       	st	Z, r25
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	9a 81       	ldd	r25, Y+2	; 0x02
    127c:	88 dc       	rcall	.-1776   	; 0xb8e <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    127e:	f8 01       	movw	r30, r16
    1280:	80 81       	ld	r24, Z
    1282:	8b 77       	andi	r24, 0x7B	; 123
    1284:	80 83       	st	Z, r24
    1286:	36 c0       	rjmp	.+108    	; 0x12f4 <USB_Device_ProcessControlRequest+0x2aa>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1288:	90 38       	cpi	r25, 0x80	; 128
    128a:	a1 f5       	brne	.+104    	; 0x12f4 <USB_Device_ProcessControlRequest+0x2aa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    128c:	e8 ee       	ldi	r30, 0xE8	; 232
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	87 7f       	andi	r24, 0xF7	; 247
    1294:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1296:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    129a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    129e:	80 81       	ld	r24, Z
    12a0:	8e 77       	andi	r24, 0x7E	; 126
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    12a2:	80 83       	st	Z, r24
    12a4:	a9 dd       	rcall	.-1198   	; 0xdf8 <Endpoint_ClearStatusStage>
    12a6:	26 c0       	rjmp	.+76     	; 0x12f4 <USB_Device_ProcessControlRequest+0x2aa>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    12a8:	91 11       	cpse	r25, r1
    12aa:	24 c0       	rjmp	.+72     	; 0x12f4 <USB_Device_ProcessControlRequest+0x2aa>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    12ac:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <USB_ControlRequest+0x2>
    12b0:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <USB_ControlRequest+0x3>
    12b4:	99 27       	eor	r25, r25
    12b6:	02 97       	sbiw	r24, 0x02	; 2
    12b8:	ec f4       	brge	.+58     	; 0x12f4 <USB_Device_ProcessControlRequest+0x2aa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12ba:	e8 ee       	ldi	r30, 0xE8	; 232
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	87 7f       	andi	r24, 0xF7	; 247
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    12c2:	80 83       	st	Z, r24
    12c4:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <USB_ControlRequest+0x2>
    12c8:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    12cc:	95 dd       	rcall	.-1238   	; 0xdf8 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    12ce:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <USB_Device_ConfigurationNumber>
    12d2:	88 23       	and	r24, r24
    12d4:	21 f0       	breq	.+8      	; 0x12de <USB_Device_ProcessControlRequest+0x294>
	  USB_DeviceState = DEVICE_STATE_Configured;
    12d6:	84 e0       	ldi	r24, 0x04	; 4
    12d8:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <USB_DeviceState>
    12dc:	09 c0       	rjmp	.+18     	; 0x12f0 <USB_Device_ProcessControlRequest+0x2a6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    12de:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    12e2:	88 23       	and	r24, r24
    12e4:	14 f0       	brlt	.+4      	; 0x12ea <USB_Device_ProcessControlRequest+0x2a0>
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	01 c0       	rjmp	.+2      	; 0x12ec <USB_Device_ProcessControlRequest+0x2a2>
    12ea:	84 e0       	ldi	r24, 0x04	; 4
    12ec:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    12f0:	0e 94 3b 01 	call	0x276	; 0x276 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    12f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    12f8:	83 ff       	sbrs	r24, 3
    12fa:	16 c0       	rjmp	.+44     	; 0x1328 <USB_Device_ProcessControlRequest+0x2de>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12fc:	e8 ee       	ldi	r30, 0xE8	; 232
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	87 7f       	andi	r24, 0xF7	; 247
    1304:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1306:	eb ee       	ldi	r30, 0xEB	; 235
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	80 62       	ori	r24, 0x20	; 32
    130e:	80 83       	st	Z, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1310:	0b c0       	rjmp	.+22     	; 0x1328 <USB_Device_ProcessControlRequest+0x2de>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1312:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <USB_ControlRequest+0x2>
    1316:	91 30       	cpi	r25, 0x01	; 1
    1318:	69 f7       	brne	.-38     	; 0x12f4 <USB_Device_ProcessControlRequest+0x2aa>
    131a:	fd ce       	rjmp	.-518    	; 0x1116 <USB_Device_ProcessControlRequest+0xcc>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    131c:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <USB_ControlRequest+0x2>
    1320:	88 23       	and	r24, r24
    1322:	09 f4       	brne	.+2      	; 0x1326 <USB_Device_ProcessControlRequest+0x2dc>
    1324:	ff ce       	rjmp	.-514    	; 0x1124 <USB_Device_ProcessControlRequest+0xda>
    1326:	2a cf       	rjmp	.-428    	; 0x117c <USB_Device_ProcessControlRequest+0x132>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1328:	aa 96       	adiw	r28, 0x2a	; 42
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	f8 94       	cli
    132e:	de bf       	out	0x3e, r29	; 62
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	cd bf       	out	0x3d, r28	; 61
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	1f 91       	pop	r17
    133a:	0f 91       	pop	r16
    133c:	08 95       	ret

0000133e <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    133e:	08 95       	ret

00001340 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1340:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1342:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <USB_DeviceState>
    1346:	88 23       	and	r24, r24
    1348:	99 f0       	breq	.+38     	; 0x1370 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    134a:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    134e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1350:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1354:	98 2f       	mov	r25, r24
    1356:	91 70       	andi	r25, 0x01	; 1
    1358:	80 fd       	sbrc	r24, 0
    135a:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    135c:	c9 2b       	or	r28, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    135e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1362:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1366:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1368:	70 de       	rcall	.-800    	; 0x104a <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    136a:	cf 70       	andi	r28, 0x0F	; 15
    136c:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1370:	cf 91       	pop	r28
    1372:	08 95       	ret

00001374 <memcmp>:
    1374:	fb 01       	movw	r30, r22
    1376:	dc 01       	movw	r26, r24
    1378:	04 c0       	rjmp	.+8      	; 0x1382 <memcmp+0xe>
    137a:	8d 91       	ld	r24, X+
    137c:	01 90       	ld	r0, Z+
    137e:	80 19       	sub	r24, r0
    1380:	21 f4       	brne	.+8      	; 0x138a <memcmp+0x16>
    1382:	41 50       	subi	r20, 0x01	; 1
    1384:	50 40       	sbci	r21, 0x00	; 0
    1386:	c8 f7       	brcc	.-14     	; 0x137a <memcmp+0x6>
    1388:	88 1b       	sub	r24, r24
    138a:	99 0b       	sbc	r25, r25
    138c:	08 95       	ret

0000138e <memcpy>:
    138e:	fb 01       	movw	r30, r22
    1390:	dc 01       	movw	r26, r24
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <memcpy+0xa>
    1394:	01 90       	ld	r0, Z+
    1396:	0d 92       	st	X+, r0
    1398:	41 50       	subi	r20, 0x01	; 1
    139a:	50 40       	sbci	r21, 0x00	; 0
    139c:	d8 f7       	brcc	.-10     	; 0x1394 <memcpy+0x6>
    139e:	08 95       	ret

000013a0 <memset>:
    13a0:	dc 01       	movw	r26, r24
    13a2:	01 c0       	rjmp	.+2      	; 0x13a6 <memset+0x6>
    13a4:	6d 93       	st	X+, r22
    13a6:	41 50       	subi	r20, 0x01	; 1
    13a8:	50 40       	sbci	r21, 0x00	; 0
    13aa:	e0 f7       	brcc	.-8      	; 0x13a4 <memset+0x4>
    13ac:	08 95       	ret

000013ae <_exit>:
    13ae:	f8 94       	cli

000013b0 <__stop_program>:
    13b0:	ff cf       	rjmp	.-2      	; 0x13b0 <__stop_program>
